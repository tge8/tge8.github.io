<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Emoji代码</title>
    <url>/post/d29ec80f.html</url>
    <content><![CDATA[<p>People</p>
<table>
<thead>
<tr>
<th>:bowtie: <code>:bowtie:</code></th>
<th>😄 <code>:smile:</code></th>
<th>😆 <code>:laughing:</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>😊 <code>:blush:</code></td>
<td>😃 <code>:smiley:</code></td>
<td>☺️ <code>:relaxed:</code></td>
</tr>
<tr>
<td>😏 <code>:smirk:</code></td>
<td>😍 <code>:heart_eyes:</code></td>
<td>😘 <code>:kissing_heart:</code></td>
</tr>
<tr>
<td>😚 <code>:kissing_closed_eyes:</code></td>
<td>😳 <code>:flushed:</code></td>
<td>😌 <code>:relieved:</code></td>
</tr>
<tr>
<td>😆 <code>:satisfied:</code></td>
<td>😁 <code>:grin:</code></td>
<td>😉 <code>:wink:</code></td>
</tr>
<tr>
<td>😜 <code>:stuck_out_tongue_winking_eye:</code></td>
<td>😝 <code>:stuck_out_tongue_closed_eyes:</code></td>
<td>😀 <code>:grinning:</code></td>
</tr>
<tr>
<td>😗 <code>:kissing:</code></td>
<td>😙 <code>:kissing_smiling_eyes:</code></td>
<td>😛 <code>:stuck_out_tongue:</code></td>
</tr>
<tr>
<td>😴 <code>:sleeping:</code></td>
<td>😟 <code>:worried:</code></td>
<td>😦 <code>:frowning:</code></td>
</tr>
<tr>
<td>😧 <code>:anguished:</code></td>
<td>😮 <code>:open_mouth:</code></td>
<td>😬 <code>:grimacing:</code></td>
</tr>
<tr>
<td>😕 <code>:confused:</code></td>
<td>😯 <code>:hushed:</code></td>
<td>😑 <code>:expressionless:</code></td>
</tr>
<tr>
<td>😒 <code>:unamused:</code></td>
<td>😅 <code>:sweat_smile:</code></td>
<td>😓 <code>:sweat:</code></td>
</tr>
<tr>
<td>😥 <code>:disappointed_relieved:</code></td>
<td>😩 <code>:weary:</code></td>
<td>😔 <code>:pensive:</code></td>
</tr>
<tr>
<td>😞 <code>:disappointed:</code></td>
<td>😖 <code>:confounded:</code></td>
<td>😨 <code>:fearful:</code></td>
</tr>
<tr>
<td>😰 <code>:cold_sweat:</code></td>
<td>😣 <code>:persevere:</code></td>
<td>😢 <code>:cry:</code></td>
</tr>
<tr>
<td>😭 <code>:sob:</code></td>
<td>😂 <code>:joy:</code></td>
<td>😲 <code>:astonished:</code></td>
</tr>
<tr>
<td>😱 <code>:scream:</code></td>
<td>:neckbeard: <code>:neckbeard:</code></td>
<td>😫 <code>:tired_face:</code></td>
</tr>
<tr>
<td>😠 <code>:angry:</code></td>
<td>😡 <code>:rage:</code></td>
<td>😤 <code>:triumph:</code></td>
</tr>
<tr>
<td>😪 <code>:sleepy:</code></td>
<td>😋 <code>:yum:</code></td>
<td>😷 <code>:mask:</code></td>
</tr>
<tr>
<td>😎 <code>:sunglasses:</code></td>
<td>😵 <code>:dizzy_face:</code></td>
<td>👿 <code>:imp:</code></td>
</tr>
<tr>
<td>😈 <code>:smiling_imp:</code></td>
<td>😐 <code>:neutral_face:</code></td>
<td>😶 <code>:no_mouth:</code></td>
</tr>
<tr>
<td>😇 <code>:innocent:</code></td>
<td>👽 <code>:alien:</code></td>
<td>💛 <code>:yellow_heart:</code></td>
</tr>
<tr>
<td>💙 <code>:blue_heart:</code></td>
<td>💜 <code>:purple_heart:</code></td>
<td>❤️ <code>:heart:</code></td>
</tr>
<tr>
<td>💚 <code>:green_heart:</code></td>
<td>💔 <code>:broken_heart:</code></td>
<td>💓 <code>:heartbeat:</code></td>
</tr>
<tr>
<td>💗 <code>:heartpulse:</code></td>
<td>💕 <code>:two_hearts:</code></td>
<td>💞 <code>:revolving_hearts:</code></td>
</tr>
<tr>
<td>💘 <code>:cupid:</code></td>
<td>💖 <code>:sparkling_heart:</code></td>
<td>✨ <code>:sparkles:</code></td>
</tr>
<tr>
<td>⭐ <code>:star:</code></td>
<td>🌟 <code>:star2:</code></td>
<td>💫 <code>:dizzy:</code></td>
</tr>
<tr>
<td>💥 <code>:boom:</code></td>
<td>💥 <code>:collision:</code></td>
<td>💢 <code>:anger:</code></td>
</tr>
<tr>
<td>❗ <code>:exclamation:</code></td>
<td>❓ <code>:question:</code></td>
<td>❕ <code>:grey_exclamation:</code></td>
</tr>
<tr>
<td>❔ <code>:grey_question:</code></td>
<td>💤 <code>:zzz:</code></td>
<td>💨 <code>:dash:</code></td>
</tr>
<tr>
<td>💦 <code>:sweat_drops:</code></td>
<td>🎶 <code>:notes:</code></td>
<td>🎵 <code>:musical_note:</code></td>
</tr>
<tr>
<td>🔥 <code>:fire:</code></td>
<td>💩 <code>:hankey:</code></td>
<td>💩 <code>:poop:</code></td>
</tr>
<tr>
<td>💩 <code>:shit:</code></td>
<td>👍 <code>:+1:</code></td>
<td>👍 <code>:thumbsup:</code></td>
</tr>
<tr>
<td>👎 <code>:-1:</code></td>
<td>👎 <code>:thumbsdown:</code></td>
<td>👌 <code>:ok_hand:</code></td>
</tr>
<tr>
<td>👊 <code>:punch:</code></td>
<td>👊 <code>:facepunch:</code></td>
<td>✊ <code>:fist:</code></td>
</tr>
<tr>
<td>✌️ <code>:v:</code></td>
<td>👋 <code>:wave:</code></td>
<td>✋ <code>:hand:</code></td>
</tr>
<tr>
<td>✋ <code>:raised_hand:</code></td>
<td>👐 <code>:open_hands:</code></td>
<td>☝️ <code>:point_up:</code></td>
</tr>
<tr>
<td>👇 <code>:point_down:</code></td>
<td>👈 <code>:point_left:</code></td>
<td>👉 <code>:point_right:</code></td>
</tr>
<tr>
<td>🙌 <code>:raised_hands:</code></td>
<td>🙏 <code>:pray:</code></td>
<td>👆 <code>:point_up_2:</code></td>
</tr>
<tr>
<td>👏 <code>:clap:</code></td>
<td>💪 <code>:muscle:</code></td>
<td>🤘 <code>:metal:</code></td>
</tr>
<tr>
<td>🖕 <code>:fu:</code></td>
<td>🚶 <code>:walking:</code></td>
<td>🏃 <code>:runner:</code></td>
</tr>
<tr>
<td>🏃 <code>:running:</code></td>
<td>👫 <code>:couple:</code></td>
<td>👪 <code>:family:</code></td>
</tr>
<tr>
<td>👬 <code>:two_men_holding_hands:</code></td>
<td>👭 <code>:two_women_holding_hands:</code></td>
<td>💃 <code>:dancer:</code></td>
</tr>
<tr>
<td>👯 <code>:dancers:</code></td>
<td>🙆‍♀️ <code>:ok_woman:</code></td>
<td>🙅 <code>:no_good:</code></td>
</tr>
<tr>
<td>💁 <code>:information_desk_person:</code></td>
<td>🙋 <code>:raising_hand:</code></td>
<td>👰‍♀️ <code>:bride_with_veil:</code></td>
</tr>
<tr>
<td>:person_with_pouting_face: <code>:person_with_pouting_face:</code></td>
<td>:person_frowning: <code>:person_frowning:</code></td>
<td>🙇 <code>:bow:</code></td>
</tr>
<tr>
<td>💏 <code>:couplekiss:</code></td>
<td>💑 <code>:couple_with_heart:</code></td>
<td>💆 <code>:massage:</code></td>
</tr>
<tr>
<td>💇 <code>:haircut:</code></td>
<td>💅 <code>:nail_care:</code></td>
<td>👦 <code>:boy:</code></td>
</tr>
<tr>
<td>👧 <code>:girl:</code></td>
<td>👩 <code>:woman:</code></td>
<td>👨 <code>:man:</code></td>
</tr>
<tr>
<td>👶 <code>:baby:</code></td>
<td>👵 <code>:older_woman:</code></td>
<td>👴 <code>:older_man:</code></td>
</tr>
<tr>
<td>:person_with_blond_hair: <code>:person_with_blond_hair:</code></td>
<td>👲 <code>:man_with_gua_pi_mao:</code></td>
<td>👳‍♂️ <code>:man_with_turban:</code></td>
</tr>
<tr>
<td>👷 <code>:construction_worker:</code></td>
<td>👮 <code>:cop:</code></td>
<td>👼 <code>:angel:</code></td>
</tr>
<tr>
<td>👸 <code>:princess:</code></td>
<td>😺 <code>:smiley_cat:</code></td>
<td>😸 <code>:smile_cat:</code></td>
</tr>
<tr>
<td>😻 <code>:heart_eyes_cat:</code></td>
<td>😽 <code>:kissing_cat:</code></td>
<td>😼 <code>:smirk_cat:</code></td>
</tr>
<tr>
<td>🙀 <code>:scream_cat:</code></td>
<td>😿 <code>:crying_cat_face:</code></td>
<td>😹 <code>:joy_cat:</code></td>
</tr>
<tr>
<td>😾 <code>:pouting_cat:</code></td>
<td>👹 <code>:japanese_ogre:</code></td>
<td>👺 <code>:japanese_goblin:</code></td>
</tr>
<tr>
<td>🙈 <code>:see_no_evil:</code></td>
<td>🙉 <code>:hear_no_evil:</code></td>
<td>🙊 <code>:speak_no_evil:</code></td>
</tr>
<tr>
<td>💂‍♂️ <code>:guardsman:</code></td>
<td>💀 <code>:skull:</code></td>
<td>🐾 <code>:feet:</code></td>
</tr>
<tr>
<td>👄 <code>:lips:</code></td>
<td>💋 <code>:kiss:</code></td>
<td>💧 <code>:droplet:</code></td>
</tr>
<tr>
<td>👂 <code>:ear:</code></td>
<td>👀 <code>:eyes:</code></td>
<td>👃 <code>:nose:</code></td>
</tr>
<tr>
<td>👅 <code>:tongue:</code></td>
<td>💌 <code>:love_letter:</code></td>
<td>👤 <code>:bust_in_silhouette:</code></td>
</tr>
<tr>
<td>👥 <code>:busts_in_silhouette:</code></td>
<td>💬 <code>:speech_balloon:</code></td>
<td>💭 <code>:thought_balloon:</code></td>
</tr>
<tr>
<td>:feelsgood: <code>:feelsgood:</code></td>
<td>:finnadie: <code>:finnadie:</code></td>
<td>:goberserk: <code>:goberserk:</code></td>
</tr>
<tr>
<td>:godmode: <code>:godmode:</code></td>
<td>:hurtrealbad: <code>:hurtrealbad:</code></td>
<td>:rage1: <code>:rage1:</code></td>
</tr>
<tr>
<td>:rage2: <code>:rage2:</code></td>
<td>:rage3: <code>:rage3:</code></td>
<td>:rage4: <code>:rage4:</code></td>
</tr>
<tr>
<td>:suspect: <code>:suspect:</code></td>
<td>:trollface: <code>:trollface:</code></td>
<td></td>
</tr>
</tbody>
</table>
<p>Nature</p>
<table>
<thead>
<tr>
<th>☀️ <code>:sunny:</code></th>
<th>☔ <code>:umbrella:</code></th>
<th>☁️ <code>:cloud:</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>❄️ <code>:snowflake:</code></td>
<td>⛄ <code>:snowman:</code></td>
<td>⚡ <code>:zap:</code></td>
</tr>
<tr>
<td>🌀 <code>:cyclone:</code></td>
<td>🌁 <code>:foggy:</code></td>
<td>🌊 <code>:ocean:</code></td>
</tr>
<tr>
<td>🐱 <code>:cat:</code></td>
<td>🐶 <code>:dog:</code></td>
<td>🐭 <code>:mouse:</code></td>
</tr>
<tr>
<td>🐹 <code>:hamster:</code></td>
<td>🐰 <code>:rabbit:</code></td>
<td>🐺 <code>:wolf:</code></td>
</tr>
<tr>
<td>🐸 <code>:frog:</code></td>
<td>🐯 <code>:tiger:</code></td>
<td>🐨 <code>:koala:</code></td>
</tr>
<tr>
<td>🐻 <code>:bear:</code></td>
<td>🐷 <code>:pig:</code></td>
<td>🐽 <code>:pig_nose:</code></td>
</tr>
<tr>
<td>🐮 <code>:cow:</code></td>
<td>🐗 <code>:boar:</code></td>
<td>🐵 <code>:monkey_face:</code></td>
</tr>
<tr>
<td>🐒 <code>:monkey:</code></td>
<td>🐴 <code>:horse:</code></td>
<td>🐎 <code>:racehorse:</code></td>
</tr>
<tr>
<td>🐫 <code>:camel:</code></td>
<td>🐑 <code>:sheep:</code></td>
<td>🐘 <code>:elephant:</code></td>
</tr>
<tr>
<td>🐼 <code>:panda_face:</code></td>
<td>🐍 <code>:snake:</code></td>
<td>🐦 <code>:bird:</code></td>
</tr>
<tr>
<td>🐤 <code>:baby_chick:</code></td>
<td>🐥 <code>:hatched_chick:</code></td>
<td>🐣 <code>:hatching_chick:</code></td>
</tr>
<tr>
<td>🐔 <code>:chicken:</code></td>
<td>🐧 <code>:penguin:</code></td>
<td>🐢 <code>:turtle:</code></td>
</tr>
<tr>
<td>🐛 <code>:bug:</code></td>
<td>🐝 <code>:honeybee:</code></td>
<td>🐜 <code>:ant:</code></td>
</tr>
<tr>
<td>🪲 <code>:beetle:</code></td>
<td>🐌 <code>:snail:</code></td>
<td>🐙 <code>:octopus:</code></td>
</tr>
<tr>
<td>🐠 <code>:tropical_fish:</code></td>
<td>🐟 <code>:fish:</code></td>
<td>🐳 <code>:whale:</code></td>
</tr>
<tr>
<td>🐋 <code>:whale2:</code></td>
<td>🐬 <code>:dolphin:</code></td>
<td>🐄 <code>:cow2:</code></td>
</tr>
<tr>
<td>🐏 <code>:ram:</code></td>
<td>🐀 <code>:rat:</code></td>
<td>🐃 <code>:water_buffalo:</code></td>
</tr>
<tr>
<td>🐅 <code>:tiger2:</code></td>
<td>🐇 <code>:rabbit2:</code></td>
<td>🐉 <code>:dragon:</code></td>
</tr>
<tr>
<td>🐐 <code>:goat:</code></td>
<td>🐓 <code>:rooster:</code></td>
<td>🐕 <code>:dog2:</code></td>
</tr>
<tr>
<td>🐖 <code>:pig2:</code></td>
<td>🐁 <code>:mouse2:</code></td>
<td>🐂 <code>:ox:</code></td>
</tr>
<tr>
<td>🐲 <code>:dragon_face:</code></td>
<td>🐡 <code>:blowfish:</code></td>
<td>🐊 <code>:crocodile:</code></td>
</tr>
<tr>
<td>🐪 <code>:dromedary_camel:</code></td>
<td>🐆 <code>:leopard:</code></td>
<td>🐈 <code>:cat2:</code></td>
</tr>
<tr>
<td>🐩 <code>:poodle:</code></td>
<td>🐾 <code>:paw_prints:</code></td>
<td>💐 <code>:bouquet:</code></td>
</tr>
<tr>
<td>🌸 <code>:cherry_blossom:</code></td>
<td>🌷 <code>:tulip:</code></td>
<td>🍀 <code>:four_leaf_clover:</code></td>
</tr>
<tr>
<td>🌹 <code>:rose:</code></td>
<td>🌻 <code>:sunflower:</code></td>
<td>🌺 <code>:hibiscus:</code></td>
</tr>
<tr>
<td>🍁 <code>:maple_leaf:</code></td>
<td>🍃 <code>:leaves:</code></td>
<td>🍂 <code>:fallen_leaf:</code></td>
</tr>
<tr>
<td>🌿 <code>:herb:</code></td>
<td>🍄 <code>:mushroom:</code></td>
<td>🌵 <code>:cactus:</code></td>
</tr>
<tr>
<td>🌴 <code>:palm_tree:</code></td>
<td>🌲 <code>:evergreen_tree:</code></td>
<td>🌳 <code>:deciduous_tree:</code></td>
</tr>
<tr>
<td>🌰 <code>:chestnut:</code></td>
<td>🌱 <code>:seedling:</code></td>
<td>🌼 <code>:blossom:</code></td>
</tr>
<tr>
<td>🌾 <code>:ear_of_rice:</code></td>
<td>🐚 <code>:shell:</code></td>
<td>🌐 <code>:globe_with_meridians:</code></td>
</tr>
<tr>
<td>🌞 <code>:sun_with_face:</code></td>
<td>🌝 <code>:full_moon_with_face:</code></td>
<td>🌚 <code>:new_moon_with_face:</code></td>
</tr>
<tr>
<td>🌑 <code>:new_moon:</code></td>
<td>🌒 <code>:waxing_crescent_moon:</code></td>
<td>🌓 <code>:first_quarter_moon:</code></td>
</tr>
<tr>
<td>🌔 <code>:waxing_gibbous_moon:</code></td>
<td>🌕 <code>:full_moon:</code></td>
<td>🌖 <code>:waning_gibbous_moon:</code></td>
</tr>
<tr>
<td>🌗 <code>:last_quarter_moon:</code></td>
<td>🌘 <code>:waning_crescent_moon:</code></td>
<td>🌜 <code>:last_quarter_moon_with_face:</code></td>
</tr>
<tr>
<td>🌛 <code>:first_quarter_moon_with_face:</code></td>
<td>🌔 <code>:moon:</code></td>
<td>🌍 <code>:earth_africa:</code></td>
</tr>
<tr>
<td>🌎 <code>:earth_americas:</code></td>
<td>🌏 <code>:earth_asia:</code></td>
<td>🌋 <code>:volcano:</code></td>
</tr>
<tr>
<td>🌌 <code>:milky_way:</code></td>
<td>⛅ <code>:partly_sunny:</code></td>
<td>:octocat: <code>:octocat:</code></td>
</tr>
<tr>
<td>:squirrel: <code>:squirrel:</code></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Objects</p>
<table>
<thead>
<tr>
<th>🎍 <code>:bamboo:</code></th>
<th>💝 <code>:gift_heart:</code></th>
<th>🎎 <code>:dolls:</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>🎒 <code>:school_satchel:</code></td>
<td>🎓 <code>:mortar_board:</code></td>
<td>🎏 <code>:flags:</code></td>
</tr>
<tr>
<td>🎆 <code>:fireworks:</code></td>
<td>🎇 <code>:sparkler:</code></td>
<td>🎐 <code>:wind_chime:</code></td>
</tr>
<tr>
<td>🎑 <code>:rice_scene:</code></td>
<td>🎃 <code>:jack_o_lantern:</code></td>
<td>👻 <code>:ghost:</code></td>
</tr>
<tr>
<td>🎅 <code>:santa:</code></td>
<td>🎄 <code>:christmas_tree:</code></td>
<td>🎁 <code>:gift:</code></td>
</tr>
<tr>
<td>🔔 <code>:bell:</code></td>
<td>🔕 <code>:no_bell:</code></td>
<td>🎋 <code>:tanabata_tree:</code></td>
</tr>
<tr>
<td>🎉 <code>:tada:</code></td>
<td>🎊 <code>:confetti_ball:</code></td>
<td>🎈 <code>:balloon:</code></td>
</tr>
<tr>
<td>🔮 <code>:crystal_ball:</code></td>
<td>💿 <code>:cd:</code></td>
<td>📀 <code>:dvd:</code></td>
</tr>
<tr>
<td>💾 <code>:floppy_disk:</code></td>
<td>📷 <code>:camera:</code></td>
<td>📹 <code>:video_camera:</code></td>
</tr>
<tr>
<td>🎥 <code>:movie_camera:</code></td>
<td>💻 <code>:computer:</code></td>
<td>📺 <code>:tv:</code></td>
</tr>
<tr>
<td>📱 <code>:iphone:</code></td>
<td>☎️ <code>:phone:</code></td>
<td>☎️ <code>:telephone:</code></td>
</tr>
<tr>
<td>📞 <code>:telephone_receiver:</code></td>
<td>📟 <code>:pager:</code></td>
<td>📠 <code>:fax:</code></td>
</tr>
<tr>
<td>💽 <code>:minidisc:</code></td>
<td>📼 <code>:vhs:</code></td>
<td>🔉 <code>:sound:</code></td>
</tr>
<tr>
<td>🔈 <code>:speaker:</code></td>
<td>🔇 <code>:mute:</code></td>
<td>📢 <code>:loudspeaker:</code></td>
</tr>
<tr>
<td>📣 <code>:mega:</code></td>
<td>⌛ <code>:hourglass:</code></td>
<td>⏳ <code>:hourglass_flowing_sand:</code></td>
</tr>
<tr>
<td>⏰ <code>:alarm_clock:</code></td>
<td>⌚ <code>:watch:</code></td>
<td>📻 <code>:radio:</code></td>
</tr>
<tr>
<td>📡 <code>:satellite:</code></td>
<td>➿ <code>:loop:</code></td>
<td>🔍 <code>:mag:</code></td>
</tr>
<tr>
<td>🔎 <code>:mag_right:</code></td>
<td>🔓 <code>:unlock:</code></td>
<td>🔒 <code>:lock:</code></td>
</tr>
<tr>
<td>🔏 <code>:lock_with_ink_pen:</code></td>
<td>🔐 <code>:closed_lock_with_key:</code></td>
<td>🔑 <code>:key:</code></td>
</tr>
<tr>
<td>💡 <code>:bulb:</code></td>
<td>🔦 <code>:flashlight:</code></td>
<td>🔆 <code>:high_brightness:</code></td>
</tr>
<tr>
<td>🔅 <code>:low_brightness:</code></td>
<td>🔌 <code>:electric_plug:</code></td>
<td>🔋 <code>:battery:</code></td>
</tr>
<tr>
<td>📲 <code>:calling:</code></td>
<td>📧 <code>:email:</code></td>
<td>📫 <code>:mailbox:</code></td>
</tr>
<tr>
<td>📮 <code>:postbox:</code></td>
<td>🛀 <code>:bath:</code></td>
<td>🛁 <code>:bathtub:</code></td>
</tr>
<tr>
<td>🚿 <code>:shower:</code></td>
<td>🚽 <code>:toilet:</code></td>
<td>🔧 <code>:wrench:</code></td>
</tr>
<tr>
<td>🔩 <code>:nut_and_bolt:</code></td>
<td>🔨 <code>:hammer:</code></td>
<td>💺 <code>:seat:</code></td>
</tr>
<tr>
<td>💰 <code>:moneybag:</code></td>
<td>💴 <code>:yen:</code></td>
<td>💵 <code>:dollar:</code></td>
</tr>
<tr>
<td>💷 <code>:pound:</code></td>
<td>💶 <code>:euro:</code></td>
<td>💳 <code>:credit_card:</code></td>
</tr>
<tr>
<td>💸 <code>:money_with_wings:</code></td>
<td>📧 <code>:e-mail:</code></td>
<td>📥 <code>:inbox_tray:</code></td>
</tr>
<tr>
<td>📤 <code>:outbox_tray:</code></td>
<td>✉️ <code>:envelope:</code></td>
<td>📨 <code>:incoming_envelope:</code></td>
</tr>
<tr>
<td>📯 <code>:postal_horn:</code></td>
<td>📪 <code>:mailbox_closed:</code></td>
<td>📬 <code>:mailbox_with_mail:</code></td>
</tr>
<tr>
<td>📭 <code>:mailbox_with_no_mail:</code></td>
<td>🚪 <code>:door:</code></td>
<td>🚬 <code>:smoking:</code></td>
</tr>
<tr>
<td>💣 <code>:bomb:</code></td>
<td>🔫 <code>:gun:</code></td>
<td>🔪 <code>:hocho:</code></td>
</tr>
<tr>
<td>💊 <code>:pill:</code></td>
<td>💉 <code>:syringe:</code></td>
<td>📄 <code>:page_facing_up:</code></td>
</tr>
<tr>
<td>📃 <code>:page_with_curl:</code></td>
<td>📑 <code>:bookmark_tabs:</code></td>
<td>📊 <code>:bar_chart:</code></td>
</tr>
<tr>
<td>📈 <code>:chart_with_upwards_trend:</code></td>
<td>📉 <code>:chart_with_downwards_trend:</code></td>
<td>📜 <code>:scroll:</code></td>
</tr>
<tr>
<td>📋 <code>:clipboard:</code></td>
<td>📆 <code>:calendar:</code></td>
<td>📅 <code>:date:</code></td>
</tr>
<tr>
<td>📇 <code>:card_index:</code></td>
<td>📁 <code>:file_folder:</code></td>
<td>📂 <code>:open_file_folder:</code></td>
</tr>
<tr>
<td>✂️ <code>:scissors:</code></td>
<td>📌 <code>:pushpin:</code></td>
<td>📎 <code>:paperclip:</code></td>
</tr>
<tr>
<td>✒️ <code>:black_nib:</code></td>
<td>✏️ <code>:pencil2:</code></td>
<td>📏 <code>:straight_ruler:</code></td>
</tr>
<tr>
<td>📐 <code>:triangular_ruler:</code></td>
<td>📕 <code>:closed_book:</code></td>
<td>📗 <code>:green_book:</code></td>
</tr>
<tr>
<td>📘 <code>:blue_book:</code></td>
<td>📙 <code>:orange_book:</code></td>
<td>📓 <code>:notebook:</code></td>
</tr>
<tr>
<td>📔 <code>:notebook_with_decorative_cover:</code></td>
<td>📒 <code>:ledger:</code></td>
<td>📚 <code>:books:</code></td>
</tr>
<tr>
<td>🔖 <code>:bookmark:</code></td>
<td>📛 <code>:name_badge:</code></td>
<td>🔬 <code>:microscope:</code></td>
</tr>
<tr>
<td>🔭 <code>:telescope:</code></td>
<td>📰 <code>:newspaper:</code></td>
<td>🏈 <code>:football:</code></td>
</tr>
<tr>
<td>🏀 <code>:basketball:</code></td>
<td>⚽ <code>:soccer:</code></td>
<td>⚾ <code>:baseball:</code></td>
</tr>
<tr>
<td>🎾 <code>:tennis:</code></td>
<td>🎱 <code>:8ball:</code></td>
<td>🏉 <code>:rugby_football:</code></td>
</tr>
<tr>
<td>🎳 <code>:bowling:</code></td>
<td>⛳ <code>:golf:</code></td>
<td>🚵 <code>:mountain_bicyclist:</code></td>
</tr>
<tr>
<td>🚴 <code>:bicyclist:</code></td>
<td>🏇 <code>:horse_racing:</code></td>
<td>🏂 <code>:snowboarder:</code></td>
</tr>
<tr>
<td>🏊 <code>:swimmer:</code></td>
<td>🏄 <code>:surfer:</code></td>
<td>🎿 <code>:ski:</code></td>
</tr>
<tr>
<td>♠️ <code>:spades:</code></td>
<td>♥️ <code>:hearts:</code></td>
<td>♣️ <code>:clubs:</code></td>
</tr>
<tr>
<td>♦️ <code>:diamonds:</code></td>
<td>💎 <code>:gem:</code></td>
<td>💍 <code>:ring:</code></td>
</tr>
<tr>
<td>🏆 <code>:trophy:</code></td>
<td>🎼 <code>:musical_score:</code></td>
<td>🎹 <code>:musical_keyboard:</code></td>
</tr>
<tr>
<td>🎻 <code>:violin:</code></td>
<td>👾 <code>:space_invader:</code></td>
<td>🎮 <code>:video_game:</code></td>
</tr>
<tr>
<td>🃏 <code>:black_joker:</code></td>
<td>🎴 <code>:flower_playing_cards:</code></td>
<td>🎲 <code>:game_die:</code></td>
</tr>
<tr>
<td>🎯 <code>:dart:</code></td>
<td>🀄 <code>:mahjong:</code></td>
<td>🎬 <code>:clapper:</code></td>
</tr>
<tr>
<td>📝 <code>:memo:</code></td>
<td>📝 <code>:pencil:</code></td>
<td>📖 <code>:book:</code></td>
</tr>
<tr>
<td>🎨 <code>:art:</code></td>
<td>🎤 <code>:microphone:</code></td>
<td>🎧 <code>:headphones:</code></td>
</tr>
<tr>
<td>🎺 <code>:trumpet:</code></td>
<td>🎷 <code>:saxophone:</code></td>
<td>🎸 <code>:guitar:</code></td>
</tr>
<tr>
<td>👞 <code>:shoe:</code></td>
<td>👡 <code>:sandal:</code></td>
<td>👠 <code>:high_heel:</code></td>
</tr>
<tr>
<td>💄 <code>:lipstick:</code></td>
<td>👢 <code>:boot:</code></td>
<td>👕 <code>:shirt:</code></td>
</tr>
<tr>
<td>👕 <code>:tshirt:</code></td>
<td>👔 <code>:necktie:</code></td>
<td>👚 <code>:womans_clothes:</code></td>
</tr>
<tr>
<td>👗 <code>:dress:</code></td>
<td>🎽 <code>:running_shirt_with_sash:</code></td>
<td>👖 <code>:jeans:</code></td>
</tr>
<tr>
<td>👘 <code>:kimono:</code></td>
<td>👙 <code>:bikini:</code></td>
<td>🎀 <code>:ribbon:</code></td>
</tr>
<tr>
<td>🎩 <code>:tophat:</code></td>
<td>👑 <code>:crown:</code></td>
<td>👒 <code>:womans_hat:</code></td>
</tr>
<tr>
<td>👞 <code>:mans_shoe:</code></td>
<td>🌂 <code>:closed_umbrella:</code></td>
<td>💼 <code>:briefcase:</code></td>
</tr>
<tr>
<td>👜 <code>:handbag:</code></td>
<td>👝 <code>:pouch:</code></td>
<td>👛 <code>:purse:</code></td>
</tr>
<tr>
<td>👓 <code>:eyeglasses:</code></td>
<td>🎣 <code>:fishing_pole_and_fish:</code></td>
<td>☕ <code>:coffee:</code></td>
</tr>
<tr>
<td>🍵 <code>:tea:</code></td>
<td>🍶 <code>:sake:</code></td>
<td>🍼 <code>:baby_bottle:</code></td>
</tr>
<tr>
<td>🍺 <code>:beer:</code></td>
<td>🍻 <code>:beers:</code></td>
<td>🍸 <code>:cocktail:</code></td>
</tr>
<tr>
<td>🍹 <code>:tropical_drink:</code></td>
<td>🍷 <code>:wine_glass:</code></td>
<td>🍴 <code>:fork_and_knife:</code></td>
</tr>
<tr>
<td>🍕 <code>:pizza:</code></td>
<td>🍔 <code>:hamburger:</code></td>
<td>🍟 <code>:fries:</code></td>
</tr>
<tr>
<td>🍗 <code>:poultry_leg:</code></td>
<td>🍖 <code>:meat_on_bone:</code></td>
<td>🍝 <code>:spaghetti:</code></td>
</tr>
<tr>
<td>🍛 <code>:curry:</code></td>
<td>🍤 <code>:fried_shrimp:</code></td>
<td>🍱 <code>:bento:</code></td>
</tr>
<tr>
<td>🍣 <code>:sushi:</code></td>
<td>🍥 <code>:fish_cake:</code></td>
<td>🍙 <code>:rice_ball:</code></td>
</tr>
<tr>
<td>🍘 <code>:rice_cracker:</code></td>
<td>🍚 <code>:rice:</code></td>
<td>🍜 <code>:ramen:</code></td>
</tr>
<tr>
<td>🍲 <code>:stew:</code></td>
<td>🍢 <code>:oden:</code></td>
<td>🍡 <code>:dango:</code></td>
</tr>
<tr>
<td>🥚 <code>:egg:</code></td>
<td>🍞 <code>:bread:</code></td>
<td>🍩 <code>:doughnut:</code></td>
</tr>
<tr>
<td>🍮 <code>:custard:</code></td>
<td>🍦 <code>:icecream:</code></td>
<td>🍨 <code>:ice_cream:</code></td>
</tr>
<tr>
<td>🍧 <code>:shaved_ice:</code></td>
<td>🎂 <code>:birthday:</code></td>
<td>🍰 <code>:cake:</code></td>
</tr>
<tr>
<td>🍪 <code>:cookie:</code></td>
<td>🍫 <code>:chocolate_bar:</code></td>
<td>🍬 <code>:candy:</code></td>
</tr>
<tr>
<td>🍭 <code>:lollipop:</code></td>
<td>🍯 <code>:honey_pot:</code></td>
<td>🍎 <code>:apple:</code></td>
</tr>
<tr>
<td>🍏 <code>:green_apple:</code></td>
<td>🍊 <code>:tangerine:</code></td>
<td>🍋 <code>:lemon:</code></td>
</tr>
<tr>
<td>🍒 <code>:cherries:</code></td>
<td>🍇 <code>:grapes:</code></td>
<td>🍉 <code>:watermelon:</code></td>
</tr>
<tr>
<td>🍓 <code>:strawberry:</code></td>
<td>🍑 <code>:peach:</code></td>
<td>🍈 <code>:melon:</code></td>
</tr>
<tr>
<td>🍌 <code>:banana:</code></td>
<td>🍐 <code>:pear:</code></td>
<td>🍍 <code>:pineapple:</code></td>
</tr>
<tr>
<td>🍠 <code>:sweet_potato:</code></td>
<td>🍆 <code>:eggplant:</code></td>
<td>🍅 <code>:tomato:</code></td>
</tr>
<tr>
<td>🌽 <code>:corn:</code></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Places</p>
<table>
<thead>
<tr>
<th>🏠 <code>:house:</code></th>
<th>🏡 <code>:house_with_garden:</code></th>
<th>🏫 <code>:school:</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>🏢 <code>:office:</code></td>
<td>🏣 <code>:post_office:</code></td>
<td>🏥 <code>:hospital:</code></td>
</tr>
<tr>
<td>🏦 <code>:bank:</code></td>
<td>🏪 <code>:convenience_store:</code></td>
<td>🏩 <code>:love_hotel:</code></td>
</tr>
<tr>
<td>🏨 <code>:hotel:</code></td>
<td>💒 <code>:wedding:</code></td>
<td>⛪ <code>:church:</code></td>
</tr>
<tr>
<td>🏬 <code>:department_store:</code></td>
<td>🏤 <code>:european_post_office:</code></td>
<td>🌇 <code>:city_sunrise:</code></td>
</tr>
<tr>
<td>🌆 <code>:city_sunset:</code></td>
<td>🏯 <code>:japanese_castle:</code></td>
<td>🏰 <code>:european_castle:</code></td>
</tr>
<tr>
<td>⛺ <code>:tent:</code></td>
<td>🏭 <code>:factory:</code></td>
<td>🗼 <code>:tokyo_tower:</code></td>
</tr>
<tr>
<td>🗾 <code>:japan:</code></td>
<td>🗻 <code>:mount_fuji:</code></td>
<td>🌄 <code>:sunrise_over_mountains:</code></td>
</tr>
<tr>
<td>🌅 <code>:sunrise:</code></td>
<td>🌠 <code>:stars:</code></td>
<td>🗽 <code>:statue_of_liberty:</code></td>
</tr>
<tr>
<td>🌉 <code>:bridge_at_night:</code></td>
<td>🎠 <code>:carousel_horse:</code></td>
<td>🌈 <code>:rainbow:</code></td>
</tr>
<tr>
<td>🎡 <code>:ferris_wheel:</code></td>
<td>⛲ <code>:fountain:</code></td>
<td>🎢 <code>:roller_coaster:</code></td>
</tr>
<tr>
<td>🚢 <code>:ship:</code></td>
<td>🚤 <code>:speedboat:</code></td>
<td>⛵ <code>:boat:</code></td>
</tr>
<tr>
<td>⛵ <code>:sailboat:</code></td>
<td>🚣 <code>:rowboat:</code></td>
<td>⚓ <code>:anchor:</code></td>
</tr>
<tr>
<td>🚀 <code>:rocket:</code></td>
<td>✈️ <code>:airplane:</code></td>
<td>🚁 <code>:helicopter:</code></td>
</tr>
<tr>
<td>🚂 <code>:steam_locomotive:</code></td>
<td>🚊 <code>:tram:</code></td>
<td>🚞 <code>:mountain_railway:</code></td>
</tr>
<tr>
<td>🚲 <code>:bike:</code></td>
<td>🚡 <code>:aerial_tramway:</code></td>
<td>🚟 <code>:suspension_railway:</code></td>
</tr>
<tr>
<td>🚠 <code>:mountain_cableway:</code></td>
<td>🚜 <code>:tractor:</code></td>
<td>🚙 <code>:blue_car:</code></td>
</tr>
<tr>
<td>🚘 <code>:oncoming_automobile:</code></td>
<td>🚗 <code>:car:</code></td>
<td>🚗 <code>:red_car:</code></td>
</tr>
<tr>
<td>🚕 <code>:taxi:</code></td>
<td>🚖 <code>:oncoming_taxi:</code></td>
<td>🚛 <code>:articulated_lorry:</code></td>
</tr>
<tr>
<td>🚌 <code>:bus:</code></td>
<td>🚍 <code>:oncoming_bus:</code></td>
<td>🚨 <code>:rotating_light:</code></td>
</tr>
<tr>
<td>🚓 <code>:police_car:</code></td>
<td>🚔 <code>:oncoming_police_car:</code></td>
<td>🚒 <code>:fire_engine:</code></td>
</tr>
<tr>
<td>🚑 <code>:ambulance:</code></td>
<td>🚐 <code>:minibus:</code></td>
<td>🚚 <code>:truck:</code></td>
</tr>
<tr>
<td>🚋 <code>:train:</code></td>
<td>🚉 <code>:station:</code></td>
<td>🚆 <code>:train2:</code></td>
</tr>
<tr>
<td>🚅 <code>:bullettrain_front:</code></td>
<td>🚄 <code>:bullettrain_side:</code></td>
<td>🚈 <code>:light_rail:</code></td>
</tr>
<tr>
<td>🚝 <code>:monorail:</code></td>
<td>🚃 <code>:railway_car:</code></td>
<td>🚎 <code>:trolleybus:</code></td>
</tr>
<tr>
<td>🎫 <code>:ticket:</code></td>
<td>⛽ <code>:fuelpump:</code></td>
<td>🚦 <code>:vertical_traffic_light:</code></td>
</tr>
<tr>
<td>🚥 <code>:traffic_light:</code></td>
<td>⚠️ <code>:warning:</code></td>
<td>🚧 <code>:construction:</code></td>
</tr>
<tr>
<td>🔰 <code>:beginner:</code></td>
<td>🏧 <code>:atm:</code></td>
<td>🎰 <code>:slot_machine:</code></td>
</tr>
<tr>
<td>🚏 <code>:busstop:</code></td>
<td>💈 <code>:barber:</code></td>
<td>♨️ <code>:hotsprings:</code></td>
</tr>
<tr>
<td>🏁 <code>:checkered_flag:</code></td>
<td>🎌 <code>:crossed_flags:</code></td>
<td>🏮 <code>:izakaya_lantern:</code></td>
</tr>
<tr>
<td>🗿 <code>:moyai:</code></td>
<td>🎪 <code>:circus_tent:</code></td>
<td>🎭 <code>:performing_arts:</code></td>
</tr>
<tr>
<td>📍 <code>:round_pushpin:</code></td>
<td>🚩 <code>:triangular_flag_on_post:</code></td>
<td>🇯🇵 <code>:jp:</code></td>
</tr>
<tr>
<td>🇰🇷 <code>:kr:</code></td>
<td>🇨🇳 <code>:cn:</code></td>
<td>🇺🇸 <code>:us:</code></td>
</tr>
<tr>
<td>🇫🇷 <code>:fr:</code></td>
<td>🇪🇸 <code>:es:</code></td>
<td>🇮🇹 <code>:it:</code></td>
</tr>
<tr>
<td>🇷🇺 <code>:ru:</code></td>
<td>🇬🇧 <code>:gb:</code></td>
<td>🇬🇧 <code>:uk:</code></td>
</tr>
<tr>
<td>🇩🇪 <code>:de:</code></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>Symbols</p>
<table>
<thead>
<tr>
<th>1️⃣ <code>:one:</code></th>
<th>2️⃣ <code>:two:</code></th>
<th>3️⃣ <code>:three:</code></th>
</tr>
</thead>
<tbody>
<tr>
<td>4️⃣ <code>:four:</code></td>
<td>5️⃣ <code>:five:</code></td>
<td>6️⃣ <code>:six:</code></td>
</tr>
<tr>
<td>7️⃣ <code>:seven:</code></td>
<td>8️⃣ <code>:eight:</code></td>
<td>9️⃣ <code>:nine:</code></td>
</tr>
<tr>
<td>🔟 <code>:keycap_ten:</code></td>
<td>🔢 <code>:1234:</code></td>
<td>0️⃣ <code>:zero:</code></td>
</tr>
<tr>
<td>#️⃣ <code>:hash:</code></td>
<td>🔣 <code>:symbols:</code></td>
<td>◀️ <code>:arrow_backward:</code></td>
</tr>
<tr>
<td>⬇️ <code>:arrow_down:</code></td>
<td>▶️ <code>:arrow_forward:</code></td>
<td>⬅️ <code>:arrow_left:</code></td>
</tr>
<tr>
<td>🔠 <code>:capital_abcd:</code></td>
<td>🔡 <code>:abcd:</code></td>
<td>🔤 <code>:abc:</code></td>
</tr>
<tr>
<td>↙️ <code>:arrow_lower_left:</code></td>
<td>↘️ <code>:arrow_lower_right:</code></td>
<td>➡️ <code>:arrow_right:</code></td>
</tr>
<tr>
<td>⬆️ <code>:arrow_up:</code></td>
<td>↖️ <code>:arrow_upper_left:</code></td>
<td>↗️ <code>:arrow_upper_right:</code></td>
</tr>
<tr>
<td>⏬ <code>:arrow_double_down:</code></td>
<td>⏫ <code>:arrow_double_up:</code></td>
<td>🔽 <code>:arrow_down_small:</code></td>
</tr>
<tr>
<td>⤵️ <code>:arrow_heading_down:</code></td>
<td>⤴️ <code>:arrow_heading_up:</code></td>
<td>↩️ <code>:leftwards_arrow_with_hook:</code></td>
</tr>
<tr>
<td>↪️ <code>:arrow_right_hook:</code></td>
<td>↔️ <code>:left_right_arrow:</code></td>
<td>↕️ <code>:arrow_up_down:</code></td>
</tr>
<tr>
<td>🔼 <code>:arrow_up_small:</code></td>
<td>🔃 <code>:arrows_clockwise:</code></td>
<td>🔄 <code>:arrows_counterclockwise:</code></td>
</tr>
<tr>
<td>⏪ <code>:rewind:</code></td>
<td>⏩ <code>:fast_forward:</code></td>
<td>ℹ️ <code>:information_source:</code></td>
</tr>
<tr>
<td>🆗 <code>:ok:</code></td>
<td>🔀 <code>:twisted_rightwards_arrows:</code></td>
<td>🔁 <code>:repeat:</code></td>
</tr>
<tr>
<td>🔂 <code>:repeat_one:</code></td>
<td>🆕 <code>:new:</code></td>
<td>🔝 <code>:top:</code></td>
</tr>
<tr>
<td>🆙 <code>:up:</code></td>
<td>🆒 <code>:cool:</code></td>
<td>🆓 <code>:free:</code></td>
</tr>
<tr>
<td>🆖 <code>:ng:</code></td>
<td>🎦 <code>:cinema:</code></td>
<td>🈁 <code>:koko:</code></td>
</tr>
<tr>
<td>📶 <code>:signal_strength:</code></td>
<td>:u5272: <code>:u5272:</code></td>
<td>:u5408: <code>:u5408:</code></td>
</tr>
<tr>
<td>:u55b6: <code>:u55b6:</code></td>
<td>:u6307: <code>:u6307:</code></td>
<td>:u6708: <code>:u6708:</code></td>
</tr>
<tr>
<td>:u6709: <code>:u6709:</code></td>
<td>🈵 <code>:u6e80:</code></td>
<td>:u7121: <code>:u7121:</code></td>
</tr>
<tr>
<td>:u7533: <code>:u7533:</code></td>
<td>:u7a7a: <code>:u7a7a:</code></td>
<td>:u7981: <code>:u7981:</code></td>
</tr>
<tr>
<td>🈂️ <code>:sa:</code></td>
<td>🚻 <code>:restroom:</code></td>
<td>🚹 <code>:mens:</code></td>
</tr>
<tr>
<td>🚺 <code>:womens:</code></td>
<td>🚼 <code>:baby_symbol:</code></td>
<td>🚭 <code>:no_smoking:</code></td>
</tr>
<tr>
<td>🅿️ <code>:parking:</code></td>
<td>♿ <code>:wheelchair:</code></td>
<td>🚇 <code>:metro:</code></td>
</tr>
<tr>
<td>🛄 <code>:baggage_claim:</code></td>
<td>🉑 <code>:accept:</code></td>
<td>🚾 <code>:wc:</code></td>
</tr>
<tr>
<td>🚰 <code>:potable_water:</code></td>
<td>🚮 <code>:put_litter_in_its_place:</code></td>
<td>㊙️ <code>:secret:</code></td>
</tr>
<tr>
<td>㊗️ <code>:congratulations:</code></td>
<td>Ⓜ️ <code>:m:</code></td>
<td>🛂 <code>:passport_control:</code></td>
</tr>
<tr>
<td>🛅 <code>:left_luggage:</code></td>
<td>🛃 <code>:customs:</code></td>
<td>🉐 <code>:ideograph_advantage:</code></td>
</tr>
<tr>
<td>🆑 <code>:cl:</code></td>
<td>🆘 <code>:sos:</code></td>
<td>🆔 <code>:id:</code></td>
</tr>
<tr>
<td>🚫 <code>:no_entry_sign:</code></td>
<td>🔞 <code>:underage:</code></td>
<td>📵 <code>:no_mobile_phones:</code></td>
</tr>
<tr>
<td>🚯 <code>:do_not_litter:</code></td>
<td>🚱 <code>:non-potable_water:</code></td>
<td>🚳 <code>:no_bicycles:</code></td>
</tr>
<tr>
<td>🚷 <code>:no_pedestrians:</code></td>
<td>🚸 <code>:children_crossing:</code></td>
<td>⛔ <code>:no_entry:</code></td>
</tr>
<tr>
<td>✳️ <code>:eight_spoked_asterisk:</code></td>
<td>✴️ <code>:eight_pointed_black_star:</code></td>
<td>💟 <code>:heart_decoration:</code></td>
</tr>
<tr>
<td>🆚 <code>:vs:</code></td>
<td>📳 <code>:vibration_mode:</code></td>
<td>📴 <code>:mobile_phone_off:</code></td>
</tr>
<tr>
<td>💹 <code>:chart:</code></td>
<td>💱 <code>:currency_exchange:</code></td>
<td>♈ <code>:aries:</code></td>
</tr>
<tr>
<td>♉ <code>:taurus:</code></td>
<td>♊ <code>:gemini:</code></td>
<td>♋ <code>:cancer:</code></td>
</tr>
<tr>
<td>♌ <code>:leo:</code></td>
<td>♍ <code>:virgo:</code></td>
<td>♎ <code>:libra:</code></td>
</tr>
<tr>
<td>♏ <code>:scorpius:</code></td>
<td>♐ <code>:sagittarius:</code></td>
<td>♑ <code>:capricorn:</code></td>
</tr>
<tr>
<td>♒ <code>:aquarius:</code></td>
<td>♓ <code>:pisces:</code></td>
<td>⛎ <code>:ophiuchus:</code></td>
</tr>
<tr>
<td>🔯 <code>:six_pointed_star:</code></td>
<td>❎ <code>:negative_squared_cross_mark:</code></td>
<td>🅰️ <code>:a:</code></td>
</tr>
<tr>
<td>🅱️ <code>:b:</code></td>
<td>🆎 <code>:ab:</code></td>
<td>🅾️ <code>:o2:</code></td>
</tr>
<tr>
<td>💠 <code>:diamond_shape_with_a_dot_inside:</code></td>
<td>♻️ <code>:recycle:</code></td>
<td>🔚 <code>:end:</code></td>
</tr>
<tr>
<td>🔛 <code>:on:</code></td>
<td>🔜 <code>:soon:</code></td>
<td>🕐 <code>:clock1:</code></td>
</tr>
<tr>
<td>🕜 <code>:clock130:</code></td>
<td>🕙 <code>:clock10:</code></td>
<td>🕥 <code>:clock1030:</code></td>
</tr>
<tr>
<td>🕚 <code>:clock11:</code></td>
<td>🕦 <code>:clock1130:</code></td>
<td>🕛 <code>:clock12:</code></td>
</tr>
<tr>
<td>🕧 <code>:clock1230:</code></td>
<td>🕑 <code>:clock2:</code></td>
<td>🕝 <code>:clock230:</code></td>
</tr>
<tr>
<td>🕒 <code>:clock3:</code></td>
<td>🕞 <code>:clock330:</code></td>
<td>🕓 <code>:clock4:</code></td>
</tr>
<tr>
<td>🕟 <code>:clock430:</code></td>
<td>🕔 <code>:clock5:</code></td>
<td>🕠 <code>:clock530:</code></td>
</tr>
<tr>
<td>🕕 <code>:clock6:</code></td>
<td>🕡 <code>:clock630:</code></td>
<td>🕖 <code>:clock7:</code></td>
</tr>
<tr>
<td>🕢 <code>:clock730:</code></td>
<td>🕗 <code>:clock8:</code></td>
<td>🕣 <code>:clock830:</code></td>
</tr>
<tr>
<td>🕘 <code>:clock9:</code></td>
<td>🕤 <code>:clock930:</code></td>
<td>💲 <code>:heavy_dollar_sign:</code></td>
</tr>
<tr>
<td>©️ <code>:copyright:</code></td>
<td>®️ <code>:registered:</code></td>
<td>™️ <code>:tm:</code></td>
</tr>
<tr>
<td>❌ <code>:x:</code></td>
<td>❗ <code>:heavy_exclamation_mark:</code></td>
<td>‼️ <code>:bangbang:</code></td>
</tr>
<tr>
<td>⁉️ <code>:interrobang:</code></td>
<td>⭕ <code>:o:</code></td>
<td>✖️ <code>:heavy_multiplication_x:</code></td>
</tr>
<tr>
<td>➕ <code>:heavy_plus_sign:</code></td>
<td>➖ <code>:heavy_minus_sign:</code></td>
<td>➗ <code>:heavy_division_sign:</code></td>
</tr>
<tr>
<td>💮 <code>:white_flower:</code></td>
<td>💯 <code>:100:</code></td>
<td>✔️ <code>:heavy_check_mark:</code></td>
</tr>
<tr>
<td>☑️ <code>:ballot_box_with_check:</code></td>
<td>🔘 <code>:radio_button:</code></td>
<td>🔗 <code>:link:</code></td>
</tr>
<tr>
<td>➰ <code>:curly_loop:</code></td>
<td>〰️ <code>:wavy_dash:</code></td>
<td>〽️ <code>:part_alternation_mark:</code></td>
</tr>
<tr>
<td>🔱 <code>:trident:</code></td>
<td>:black_square: <code>:black_square:</code></td>
<td>:white_square: <code>:white_square:</code></td>
</tr>
<tr>
<td>✅ <code>:white_check_mark:</code></td>
<td>🔲 <code>:black_square_button:</code></td>
<td>🔳 <code>:white_square_button:</code></td>
</tr>
<tr>
<td>⚫ <code>:black_circle:</code></td>
<td>⚪ <code>:white_circle:</code></td>
<td>🔴 <code>:red_circle:</code></td>
</tr>
<tr>
<td>🔵 <code>:large_blue_circle:</code></td>
<td>🔷 <code>:large_blue_diamond:</code></td>
<td>🔶 <code>:large_orange_diamond:</code></td>
</tr>
<tr>
<td>🔹 <code>:small_blue_diamond:</code></td>
<td>🔸 <code>:small_orange_diamond:</code></td>
<td>🔺 <code>:small_red_triangle:</code></td>
</tr>
<tr>
<td>🔻 <code>:small_red_triangle_down:</code></td>
<td>:shipit: <code>:shipit:</code></td>
<td></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Python下载资源</title>
    <url>/post/604bef91.html</url>
    <content><![CDATA[<h1 id="python脚本下载资源"><a class="markdownIt-Anchor" href="#python脚本下载资源"></a> Python脚本下载资源</h1>
<p><strong>声明：</strong> 本文中的脚本仅用于学习和研究目的。请务必遵守目标网站的爬取协议（robots.txt）和相关法律法规，切勿将此脚本用于任何违法或不当的用途。非法使用可能会导致法律后果。</p>
<p>在这篇教程中，我们将介绍如何使用Python脚本从网页中批量下载文件。我们将使用<code>requests</code>库进行HTTP请求，<code>BeautifulSoup</code>进行HTML解析，<code>openpyxl</code>读取Excel文件中的URL，并通过<code>ThreadPoolExecutor</code>实现多线程下载。我们还将添加一些有趣和实用的功能，如日志记录、统计信息和命令行参数。</p>
<h2 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h2>
<p>首先，我们需要安装必要的Python库。你可以使用以下命令安装这些库：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install requests beautifulsoup4 openpyxl tqdm</span><br></pre></td></tr></table></figure>
<h2 id="导入必要的库"><a class="markdownIt-Anchor" href="#导入必要的库"></a> 导入必要的库</h2>
<p>在我们的Python脚本中，我们需要导入以下库：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin, urlparse</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> mimetypes <span class="keyword">import</span> guess_extension</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, as_completed</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"><span class="keyword">import</span> argparse</span><br></pre></td></tr></table></figure>
<h2 id="设置日志"><a class="markdownIt-Anchor" href="#设置日志"></a> 设置日志</h2>
<p>为了方便调试和记录程序运行情况，我们需要设置日志记录到文件和控制台：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logging.basicConfig(level=logging.INFO, <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s - %(levelname)s - %(message)s&#x27;</span>, handlers=[</span><br><span class="line">    logging.FileHandler(<span class="string">&quot;download.log&quot;</span>),</span><br><span class="line">    logging.StreamHandler()</span><br><span class="line">])</span><br></pre></td></tr></table></figure>
<p>这样，我们可以在控制台和日志文件中查看日志信息，方便调试和追踪问题。</p>
<h2 id="定义user-agent"><a class="markdownIt-Anchor" href="#定义user-agent"></a> 定义User-Agent</h2>
<p>为了模拟真实用户的浏览器访问，我们定义一个User-Agent：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这可以帮助我们避免被一些网站的反爬虫机制阻挡。</p>
<h2 id="创建存储文件的基文件夹"><a class="markdownIt-Anchor" href="#创建存储文件的基文件夹"></a> 创建存储文件的基文件夹</h2>
<p>为了组织下载的文件，我们在当前目录下创建一个名为“下载”的文件夹：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">base_folder = <span class="string">&quot;下载&quot;</span></span><br><span class="line">os.makedirs(base_folder, exist_ok=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>这样，我们下载的文件将按文件类型存储在不同的子文件夹中，方便管理。</p>
<h2 id="使用requestssession复用连接"><a class="markdownIt-Anchor" href="#使用requestssession复用连接"></a> 使用requests.Session复用连接</h2>
<p>为了提高下载效率，我们使用<code>requests.Session</code>复用HTTP连接：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">session = requests.Session()</span><br><span class="line">session.headers.update(headers)</span><br></pre></td></tr></table></figure>
<p>这可以减少连接建立的开销，加快下载速度。</p>
<h2 id="定义文件下载函数"><a class="markdownIt-Anchor" href="#定义文件下载函数"></a> 定义文件下载函数</h2>
<p>这个函数负责下载单个文件，并处理潜在的错误和重试机制：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>(<span class="params">file_url, retries=<span class="number">3</span></span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 解析URL并获取文件扩展名</span></span><br><span class="line">        parsed_url = urlparse(file_url)</span><br><span class="line">        file_ext = os.path.splitext(parsed_url.path)[<span class="number">1</span>][<span class="number">1</span>:]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> file_ext:</span><br><span class="line">            file_ext = <span class="string">&#x27;unknown&#x27;</span>  <span class="comment"># 如果没有扩展名，则标记为 unknown</span></span><br><span class="line">        folder = os.path.join(base_folder, file_ext)</span><br><span class="line">        os.makedirs(folder, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置本地文件路径</span></span><br><span class="line">        local_filename = os.path.join(folder, os.path.basename(parsed_url.path))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> attempt <span class="keyword">in</span> <span class="built_in">range</span>(retries):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">with</span> session.get(file_url, stream=<span class="literal">True</span>) <span class="keyword">as</span> r:</span><br><span class="line">                    r.raise_for_status()</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 检查文件大小是否大于0</span></span><br><span class="line">                    content_length = <span class="built_in">int</span>(r.headers.get(<span class="string">&#x27;content-length&#x27;</span>, <span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">if</span> content_length == <span class="number">0</span>:</span><br><span class="line">                        logging.error(<span class="string">f&quot;File at <span class="subst">&#123;file_url&#125;</span> is empty. Skipping...&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 根据Content-Type来推断文件扩展名</span></span><br><span class="line">                    content_type = r.headers.get(<span class="string">&#x27;Content-Type&#x27;</span>)</span><br><span class="line">                    guessed_extension = guess_extension(content_type) <span class="keyword">or</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">                    <span class="keyword">if</span> guessed_extension <span class="keyword">and</span> <span class="keyword">not</span> local_filename.endswith(guessed_extension):</span><br><span class="line">                        local_filename += guessed_extension</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 如果文件已存在且大小匹配，跳过下载</span></span><br><span class="line">                    <span class="keyword">if</span> os.path.exists(local_filename) <span class="keyword">and</span> os.path.getsize(local_filename) == content_length:</span><br><span class="line">                        logging.info(<span class="string">f&quot;<span class="subst">&#123;local_filename&#125;</span> already exists and is complete. Skipping...&quot;</span>)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 启用断点续传</span></span><br><span class="line">                    resume_header = &#123;&#125;</span><br><span class="line">                    <span class="keyword">if</span> os.path.exists(local_filename):</span><br><span class="line">                        resume_header[<span class="string">&#x27;Range&#x27;</span>] = <span class="string">f&#x27;bytes=<span class="subst">&#123;os.path.getsize(local_filename)&#125;</span>-&#x27;</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 下载文件并显示进度条</span></span><br><span class="line">                    <span class="keyword">with</span> session.get(file_url, headers=resume_header, stream=<span class="literal">True</span>) <span class="keyword">as</span> r:</span><br><span class="line">                        r.raise_for_status()</span><br><span class="line">                        mode = <span class="string">&#x27;ab&#x27;</span> <span class="keyword">if</span> <span class="string">&#x27;Range&#x27;</span> <span class="keyword">in</span> resume_header <span class="keyword">else</span> <span class="string">&#x27;wb&#x27;</span></span><br><span class="line">                        <span class="keyword">with</span> <span class="built_in">open</span>(local_filename, mode) <span class="keyword">as</span> f, tqdm(</span><br><span class="line">                            desc=local_filename,</span><br><span class="line">                            total=content_length,</span><br><span class="line">                            initial=os.path.getsize(local_filename) <span class="keyword">if</span> <span class="string">&#x27;Range&#x27;</span> <span class="keyword">in</span> resume_header <span class="keyword">else</span> <span class="number">0</span>,</span><br><span class="line">                            unit=<span class="string">&#x27;B&#x27;</span>,</span><br><span class="line">                            unit_scale=<span class="literal">True</span>,</span><br><span class="line">                            unit_divisor=<span class="number">1024</span>,</span><br><span class="line">                        ) <span class="keyword">as</span> bar:</span><br><span class="line">                            <span class="keyword">for</span> chunk <span class="keyword">in</span> r.iter_content(chunk_size=<span class="number">8192</span>):</span><br><span class="line">                                f.write(chunk)</span><br><span class="line">                                bar.update(<span class="built_in">len</span>(chunk))</span><br><span class="line">                logging.info(<span class="string">f&quot;Saved <span class="subst">&#123;local_filename&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">                logging.error(<span class="string">f&quot;Failed to download <span class="subst">&#123;file_url&#125;</span> (attempt <span class="subst">&#123;attempt + <span class="number">1</span>&#125;</span>): <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        logging.error(<span class="string">f&quot;Failed to download <span class="subst">&#123;file_url&#125;</span> after <span class="subst">&#123;retries&#125;</span> attempts.&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;Unexpected error while downloading <span class="subst">&#123;file_url&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这个函数会根据文件URL解析出文件扩展名，并创建相应的文件夹。它还会处理文件的断点续传，并在下载过程中显示进度条。</p>
<h2 id="提取网页中的链接"><a class="markdownIt-Anchor" href="#提取网页中的链接"></a> 提取网页中的链接</h2>
<p>这个函数从给定的URL中提取所有带有文件扩展名的链接，并支持根据文件类型过滤：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">extract_links</span>(<span class="params">url, file_types=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = session.get(url)</span><br><span class="line">        response.raise_for_status()</span><br><span class="line">        soup = BeautifulSoup(response.content, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line"></span><br><span class="line">        links_to_download = []</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> soup.find_all(<span class="string">&quot;a&quot;</span>, href=<span class="literal">True</span>):</span><br><span class="line">            href = link[<span class="string">&#x27;href&#x27;</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;.&#x27;</span> <span class="keyword">in</span> href:</span><br><span class="line">                file_url = href <span class="keyword">if</span> href.startswith(<span class="string">&quot;http&quot;</span>) <span class="keyword">else</span> urljoin(url, href)</span><br><span class="line">                <span class="keyword">if</span> file_types:</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">any</span>(file_url.endswith(file_type) <span class="keyword">for</span> file_type <span class="keyword">in</span> file_types):</span><br><span class="line">                        links_to_download.append(file_url)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    links_to_download.append(file_url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> links_to_download</span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        logging.error(<span class="string">f&quot;Failed to process <span class="subst">&#123;url&#125;</span>: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure>
<p>这个函数会解析网页内容，提取所有带有文件扩展名的链接。如果用户指定了文件类型过滤，它只会返回匹配的链接。</p>
<h2 id="主程序"><a class="markdownIt-Anchor" href="#主程序"></a> 主程序</h2>
<p>这个函数读取Excel文件中的URL，并调用提取和下载函数，同时统计下载的文件数量和总大小：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">urls, max_workers, file_types=<span class="literal">None</span></span>):</span><br><span class="line">    all_links_to_download = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用线程池提取链接</span></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=max_workers) <span class="keyword">as</span> executor:</span><br><span class="line">        futures = [executor.submit(extract_links, url, file_types) <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line">        <span class="keyword">for</span> future <span class="keyword">in</span> as_completed(futures):</span><br><span class="line">            result = future.result()</span><br><span class="line">            <span class="keyword">if</span> result:</span><br><span class="line">                all_links_to_download.extend(result)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 统计信息</span></span><br><span class="line">    logging.info(<span class="string">f&quot;Found <span class="subst">&#123;<span class="built_in">len</span>(all_links_to_download)&#125;</span> files to download.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    total_size = <span class="number">0</span></span><br><span class="line">    downloaded_files = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用线程池下载文件</span></span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=max_workers) <span class="keyword">as</span> executor:</span><br><span class="line">        futures = [executor.submit(download_file, file_url) <span class="keyword">for</span> file_url <span class="keyword">in</span> all_links_to_download]</span><br><span class="line">        <span class="keyword">for</span> future <span class="keyword">in</span> as_completed(futures):</span><br><span class="line">            future.result()</span><br><span class="line">            downloaded_files += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    logging.info(<span class="string">f&quot;Downloaded <span class="subst">&#123;downloaded_files&#125;</span> files.&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这个函数会提取所有要下载的文件链接，并使用多线程下载文件，同时显示统计信息。</p>
<h2 id="读取excel文件中的url"><a class="markdownIt-Anchor" href="#读取excel文件中的url"></a> 读取Excel文件中的URL</h2>
<p>这个函数从Excel文件中读取URL：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">read_urls_from_xlsx</span>(<span class="params">filename</span>):</span><br><span class="line">    urls = []</span><br><span class="line">    wb = openpyxl.load_workbook(filename)</span><br><span class="line">    ws = wb.active</span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> ws.iter_rows(min_row=<span class="number">2</span>, values_only=<span class="literal">True</span>):</span><br><span class="line">        <span class="keyword">if</span> row[<span class="number">0</span>]:</span><br><span class="line">            urls.append(row[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">return</span> urls</span><br></pre></td></tr></table></figure>
<p>这个函数假设Excel文件的第一行是标题行，从第二行开始读取URL。</p>
<h2 id="运行脚本"><a class="markdownIt-Anchor" href="#运行脚本"></a> 运行脚本</h2>
<p>最后，我们在脚本中添加以下代码来运行整个程序，并支持从命令行传递参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    parser = argparse.ArgumentParser(description=<span class="string">&quot;Batch download files from web pages.&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;xlsx_filename&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;Path to the Excel file containing URLs.&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--max_workers&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">5</span>, <span class="built_in">help</span>=<span class="string">&quot;Maximum number of threads to use.&quot;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&quot;--file_types&quot;</span>, nargs=<span class="string">&quot;*&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;List of file types to download (e.g. pdf, jpg).&quot;</span>)</span><br><span class="line">    args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.exists</span><br><span class="line"></span><br><span class="line">(args.xlsx_filename):</span><br><span class="line">        urls = read_urls_from_xlsx(args.xlsx_filename)</span><br><span class="line">        <span class="keyword">if</span> urls:</span><br><span class="line">            main(urls, args.max_workers, args.file_types)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            logging.error(<span class="string">&quot;No URLs found in the Excel file.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        logging.error(<span class="string">&quot;The specified Excel file does not exist.&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>这个部分解析命令行参数，包括Excel文件路径、最大线程数和文件类型过滤，并检查Excel文件是否存在和包含URL。如果一切正常，调用<code>main</code>函数开始批量下载。</p>
<h3 id="示例用法"><a class="markdownIt-Anchor" href="#示例用法"></a> 示例用法</h3>
<p>假设你的Excel文件名为<code>urls.xlsx</code>，并且你想使用10个线程下载所有的PDF和JPG文件，可以在命令行中运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python script.py urls.xlsx --max_workers 10 --file_types pdf jpg</span><br></pre></td></tr></table></figure>
<p>这样，脚本会读取<code>urls.xlsx</code>中的URL，并使用最多10个线程同时下载所有PDF和JPG文件。</p>
<h2 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h2>
<p>在本教程中，详细介绍了如何使用Python脚本批量下载网页中的文件。从读取Excel文件中的URL，到提取链接并下载文件，逐步讲解了每个环节的实现方法。通过这个教程，你学会了如何使用Python脚本从网页中批量下载文件，并掌握了如何使用多线程、日志记录和命令行参数吗？行动起来吧！希望这个教程对你有所帮助！</p>
<p>如果你有任何问题或建议，请在后台留言。</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>jsdelivr cdn 缓存清理</title>
    <url>/post/1d.html</url>
    <content><![CDATA[<h1 id="1-cdn-缓存"><a class="markdownIt-Anchor" href="#1-cdn-缓存"></a> 1. cdn 缓存</h1>
<p>jsDelivr 提供的全球 CDN 加速，CDN的分流作用不仅减少了用户的访问延时，也减少的源站的负载。因为 jsDelivr 是开源的免费 cdn，所以我个人一直在使用他，当然，你可以使用腾讯云，每个月 10G 基本上也足够用了，老用户甚至还要 50G 每月的流量，也着实很香。</p>
<p><strong>缺点：</strong></p>
<p>当网站更新时，如果CDN节点上数据没有及时更新，即便用户在浏览器使用 Ctrl +F5（win）或者 command+shift+R（mac）的强制刷新方式使浏览器端的缓存失效，也会因为CDN边缘节点没有同步最新数据而导致用户端未能及时更新。</p>
<h1 id="2-jsdelivr的cdn使用规则"><a class="markdownIt-Anchor" href="#2-jsdelivr的cdn使用规则"></a> 2. jsdelivr的cdn使用规则</h1>
<p>其实如何使用 jsdelivr，在<a href="https://www.jsdelivr.com/features">官网</a>上面就有介绍了，不过还是简单介绍下我经常使用的 github</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span>/<span class="regexp">/cdn.jsdelivr.net/gh</span><span class="regexp">/user/repo</span><span class="variable">@version</span>/file</span><br></pre></td></tr></table></figure>
<p>具体实例：</p>
<p>main 仓库的 <a href="https://github.com/tge8/hexo-cdn">https://github.com/tge8/hexo-cdn</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#github 原图</span></span><br><span class="line">https://github.com/tge8/hexo-cdn/tree/main/img/avatar.jpg</span><br><span class="line"><span class="comment">#master 默认不需要加版本号</span></span><br><span class="line">https://cdn.jsdelivr.net/gh/tge8/hexo-cdn@main/img/avatar.jpg</span><br><span class="line"><span class="comment">#如果你有多个分支多版本管理</span></span><br><span class="line">https://cdn.jsdelivr.net/gh/tge8/hexo-cdn@main/img/avatar.jpg</span><br></pre></td></tr></table></figure>
<h1 id="3-jsdelivr-缓存刷新方法"><a class="markdownIt-Anchor" href="#3-jsdelivr-缓存刷新方法"></a> 3. jsdelivr 缓存刷新方法</h1>
<p>对于 jsDelivr，缓存刷新的方式也很简单，只需将想刷新的链接的开头的cdn 更改为 purge，不过官网说后面会推出刷新工具，我这边还在观望中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://cdn.jsdelivr.net/</span><br></pre></td></tr></table></figure>
<p>切换为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://purge.jsdelivr.net/</span><br></pre></td></tr></table></figure>
<p><strong>实验：</strong> <a href="https://purge.jsdelivr.net/gh/tge8/hexo-cdn@main/js/snow.js">https://purge.jsdelivr.net/gh/tge8/hexo-cdn@main/js/snow.js</a></p>
<p>我直接在浏览器访问这个接口得出以下数据，返回status: ok，就代表完成了。</p>
<p><a href="https://pic.imgdb.cn/item/656afa25c458853aef20f6f4.png"><img src="https://pic.imgdb.cn/item/656afa25c458853aef20f6f4.png" alt="img" /></a></p>
<h1 id="4-发现推送上去但是-cdn-打不开啥原因"><a class="markdownIt-Anchor" href="#4-发现推送上去但是-cdn-打不开啥原因"></a> 4. 发现推送上去，但是 cdn 打不开？啥原因</h1>
<p>其实也就是 cdn 缓存边缘节点还没缓存过去，方法如 3 那样直接 purge 访问强制刷新到边缘节点就好啦。</p>
]]></content>
      <categories>
        <category>cdn</category>
      </categories>
      <tags>
        <tag>cdn</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>图片下载改进版-批量下载</title>
    <url>/post/f4a0f667.html</url>
    <content><![CDATA[<h3 id="高效批量下载文件使用-python-进行并行下载的实用教程"><a class="markdownIt-Anchor" href="#高效批量下载文件使用-python-进行并行下载的实用教程"></a> 高效批量下载文件：使用 Python 进行并行下载的实用教程</h3>
<p>上篇不是提取出非常多的链接了吗？这篇博文就是用那提取的链接来高效批量下载图片资源</p>
<p>在处理大量文件下载任务时，效率和可靠性是两个至关重要的因素。无论你是在进行数据抓取、下载资源包还是管理大规模文件存储，确保文件下载的高效性和稳定性都是至关重要的。在这篇文章中，我们将介绍如何使用 Python 脚本实现高效的批量文件下载。我们将涵盖并行下载、错误处理、重试机制、进度显示等功能，帮助你轻松应对大规模文件下载任务。</p>
<hr />
<h4 id="1-需求背景"><a class="markdownIt-Anchor" href="#1-需求背景"></a> 1. 需求背景</h4>
<p>在许多实际应用中，下载大量文件是常见的任务。比如：</p>
<ul>
<li><strong>数据科学家</strong>：从公开数据源批量下载数据集。</li>
<li><strong>开发者</strong>：下载依赖包或资源文件。</li>
<li><strong>内容管理员</strong>：获取大量的图片或视频文件。</li>
</ul>
<p>为了提高下载效率并确保文件完整性，我们需要一个能够处理多个文件下载的 Python 脚本，并具备错误处理、重试机制和进度显示功能。</p>
<h4 id="2-代码实现"><a class="markdownIt-Anchor" href="#2-代码实现"></a> 2. 代码实现</h4>
<p>以下是一个实现高效批量下载的 Python 脚本示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, as_completed</span><br><span class="line"><span class="keyword">from</span> requests.adapters <span class="keyword">import</span> HTTPAdapter</span><br><span class="line"><span class="keyword">from</span> requests.packages.urllib3.util.retry <span class="keyword">import</span> Retry</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个文件夹用于保存下载的文件</span></span><br><span class="line">os.makedirs(<span class="string">&#x27;downloads&#x27;</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从文件中读取要下载的文件链接列表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_file_urls</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> [line.strip() <span class="keyword">for</span> line <span class="keyword">in</span> f <span class="keyword">if</span> line.strip()]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载单个文件的函数（使用网站文件名作为本地文件名）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 解析文件名</span></span><br><span class="line">        parsed_url = urlparse(url)</span><br><span class="line">        filename = os.path.basename(parsed_url.path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 拼接本地保存路径</span></span><br><span class="line">        local_path = os.path.join(<span class="string">&#x27;downloads&#x27;</span>, filename)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Downloading <span class="subst">&#123;url&#125;</span>...&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建会话并挂载适配器</span></span><br><span class="line">        session = requests.Session()</span><br><span class="line">        retry_strategy = Retry(</span><br><span class="line">            total=<span class="number">3</span>,</span><br><span class="line">            status_forcelist=[<span class="number">429</span>, <span class="number">500</span>, <span class="number">502</span>, <span class="number">503</span>, <span class="number">504</span>],</span><br><span class="line">        )</span><br><span class="line">        adapter = HTTPAdapter(max_retries=retry_strategy)</span><br><span class="line">        session.mount(<span class="string">&quot;https://&quot;</span>, adapter)</span><br><span class="line">        session.mount(<span class="string">&quot;http://&quot;</span>, adapter)</span><br><span class="line"></span><br><span class="line">        response = session.get(url, stream=<span class="literal">True</span>)</span><br><span class="line">        total_size = <span class="built_in">int</span>(response.headers.get(<span class="string">&#x27;content-length&#x27;</span>, <span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 写入文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(local_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">with</span> tqdm(total=total_size, unit=<span class="string">&#x27;B&#x27;</span>, unit_scale=<span class="literal">True</span>, desc=os.path.basename(local_path), ncols=<span class="number">80</span>) <span class="keyword">as</span> pbar:</span><br><span class="line">                <span class="keyword">for</span> chunk <span class="keyword">in</span> response.iter_content(chunk_size=<span class="number">1024</span>):</span><br><span class="line">                    <span class="keyword">if</span> chunk:</span><br><span class="line">                        f.write(chunk)</span><br><span class="line">                        pbar.update(<span class="built_in">len</span>(chunk))</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Saved as <span class="subst">&#123;local_path&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> local_path</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;Failed to download <span class="subst">&#123;url&#125;</span>. Error: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量下载函数（并行、带错误处理、重试、缓存和断点续传）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_files</span>(<span class="params">file_urls</span>):</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">5</span>) <span class="keyword">as</span> executor:  <span class="comment"># 控制并发数</span></span><br><span class="line">        futures = [executor.submit(download_file, url) <span class="keyword">for</span> url <span class="keyword">in</span> file_urls]</span><br><span class="line">        <span class="keyword">for</span> future <span class="keyword">in</span> as_completed(futures):</span><br><span class="line">            result = future.result()</span><br><span class="line">            <span class="keyword">if</span> result:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;Downloaded: <span class="subst">&#123;result&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用读取文件链接和并行下载函数</span></span><br><span class="line">file_urls = read_file_urls(<span class="string">&#x27;links.txt&#x27;</span>)</span><br><span class="line">download_files(file_urls)</span><br></pre></td></tr></table></figure>
<h4 id="3-代码解析"><a class="markdownIt-Anchor" href="#3-代码解析"></a> 3. 代码解析</h4>
<p><strong>文件下载与保存</strong>：</p>
<ul>
<li><code>download_file</code> 函数负责下载单个文件。我们使用 <code>requests</code> 模块发送 GET 请求，并利用 <code>tqdm</code> 模块显示下载进度。</li>
<li><code>os.path.basename(urlparse(url).path)</code> 提取文件名作为本地保存文件的名称。</li>
<li>文件的下载过程中，通过检查响应头的 <code>content-length</code> 实现进度条的实时更新，并且将文件写入本地存储。</li>
</ul>
<p><strong>错误处理与重试机制</strong>：</p>
<ul>
<li>使用 <code>Retry</code> 类配置重试策略，当遇到 429（请求过多）、500（服务器错误）等 HTTP 状态码时，将自动重试最多 3 次。</li>
</ul>
<p><strong>并行下载</strong>：</p>
<ul>
<li><code>ThreadPoolExecutor</code> 实现了多线程并发下载，通过控制最大并发数（<code>max_workers=5</code>）来优化下载速度。</li>
</ul>
<p><strong>从文件中读取 URL 列表</strong>：</p>
<ul>
<li><code>read_file_urls</code> 函数从指定的文本文件中读取要下载的文件链接。</li>
</ul>
<h4 id="4-运行脚本"><a class="markdownIt-Anchor" href="#4-运行脚本"></a> 4. 运行脚本</h4>
<p>要运行这个脚本，请按照以下步骤操作：</p>
<ol>
<li>
<p>将脚本保存为 <code>download_files.py</code>。</p>
</li>
<li>
<p>确保在当前目录下有一个名为 <code>links.txt</code> 的文件，其中包含要下载的文件链接，每行一个。</p>
</li>
<li>
<p>打开终端（或命令提示符），导航到保存脚本的目录。</p>
</li>
<li>
<p>执行脚本：</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python download_files.py</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>脚本将开始下载 <code>links.txt</code> 文件中列出的所有文件，并将它们保存在 <code>downloads</code> 文件夹中。</p>
</li>
</ol>
<h4 id="5-总结"><a class="markdownIt-Anchor" href="#5-总结"></a> 5. 总结</h4>
<p>通过上述代码和教程，你可以轻松地实现高效的批量文件下载。无论你需要下载多少文件，这个脚本都能够处理并行下载、错误处理、重试机制和进度显示等功能，确保下载过程的顺利进行。希望这个教程对你有所帮助，如果你有任何问题或改进建议，请在评论中留言，我们非常期待你的反馈！</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>图片下载改进版-提取链接</title>
    <url>/post/4829f0b6.html</url>
    <content><![CDATA[<p>由于我知道一些网站图片具体地址的链接，我就想把这些链接都提取出来保存在txt文本中，然后再利用这些链接批量下载文件！</p>
<p>下面是一个关于如何使用 Python 生成一系列链接并将它们保存到文本文件中的博客教程。这个教程包括了如何编写代码、解释每个步骤的作用以及如何运行脚本。你可以根据需要对教程进行调整和扩展。</p>
<hr />
<h2 id="如何使用-python-生成并保存链接列表"><a class="markdownIt-Anchor" href="#如何使用-python-生成并保存链接列表"></a> 如何使用 Python 生成并保存链接列表</h2>
<p>在这个教程中，我们将介绍如何使用 Python 生成一系列 URL 链接，并将这些链接保存到一个文本文件中。这个过程包括三个主要步骤：</p>
<ol>
<li><strong>生成链接列表</strong>：根据模板 URL 和指定的范围生成一系列链接。</li>
<li><strong>保存链接到文本文件</strong>：将生成的链接保存到一个文本文件中。</li>
<li><strong>运行 Python 脚本</strong>：运行脚本来完成上述操作。</li>
</ol>
<h3 id="1-编写-python-脚本"><a class="markdownIt-Anchor" href="#1-编写-python-脚本"></a> 1. 编写 Python 脚本</h3>
<p>首先，我们需要编写一个 Python 脚本来完成我们的任务。以下是一个示例脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_links</span>(<span class="params">template_url, start, end</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据模板 URL 和指定的范围生成一系列链接。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param template_url: URL 模板，其中的占位符将被替换为实际的图片编号</span></span><br><span class="line"><span class="string">    :param start: 起始编号</span></span><br><span class="line"><span class="string">    :param end: 结束编号</span></span><br><span class="line"><span class="string">    :return: 链接列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    links = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start, end + <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 替换 URL 中的占位符</span></span><br><span class="line">        link = template_url.replace(<span class="string">&quot;img1&quot;</span>, <span class="string">f&quot;img<span class="subst">&#123;i&#125;</span>&quot;</span>)</span><br><span class="line">        links.append(link)</span><br><span class="line">    <span class="keyword">return</span> links</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_links_to_txt</span>(<span class="params">links, file_path</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    将链接列表保存到文本文件中。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param links: 链接列表</span></span><br><span class="line"><span class="string">    :param file_path: 文件路径</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> link <span class="keyword">in</span> links:</span><br><span class="line">            file.write(link + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># URL 模板，其中 &quot;img1&quot; 是占位符</span></span><br><span class="line">    template_url = <span class="string">&#x27;https://img.loliapi.com/i/pc/img1.webp&#x27;</span></span><br><span class="line">    <span class="comment"># 链接的编号范围</span></span><br><span class="line">    start = <span class="number">1</span></span><br><span class="line">    end = <span class="number">697</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成链接</span></span><br><span class="line">    links = generate_links(template_url, start, end)</span><br><span class="line">    <span class="comment"># 将链接保存到文件</span></span><br><span class="line">    save_links_to_txt(links, <span class="string">&#x27;links.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h3 id="2-代码详解"><a class="markdownIt-Anchor" href="#2-代码详解"></a> 2. 代码详解</h3>
<ul>
<li>
<p><strong><code>generate_links</code> 函数</strong>：</p>
<ul>
<li>这个函数接受一个模板 URL 和一个编号范围，生成一系列链接。</li>
<li>使用 <code>str.replace()</code> 方法将模板 URL 中的占位符 <code>img1</code> 替换为实际的图片编号 <code>img&#123;i&#125;</code>。</li>
<li>返回包含所有链接的列表。</li>
</ul>
</li>
<li>
<p><strong><code>save_links_to_txt</code> 函数</strong>：</p>
<ul>
<li>这个函数将生成的链接列表保存到一个文本文件中。</li>
<li>使用 <code>with open(file_path, 'w')</code> 打开文件，并将每个链接写入文件，每个链接后跟一个换行符。</li>
</ul>
</li>
<li>
<p><strong><code>main</code> 函数</strong>：</p>
<ul>
<li>定义了 URL 模板和链接的编号范围。</li>
<li>调用 <code>generate_links</code> 函数生成链接列表。</li>
<li>调用 <code>save_links_to_txt</code> 函数将链接保存到 <code>links.txt</code> 文件中。</li>
</ul>
</li>
</ul>
<h3 id="3-运行-python-脚本"><a class="markdownIt-Anchor" href="#3-运行-python-脚本"></a> 3. 运行 Python 脚本</h3>
<p>要运行这个脚本，请按照以下步骤操作：</p>
<ol>
<li>
<p>将脚本保存为 <code>generate_links.py</code> 文件。</p>
</li>
<li>
<p>打开终端（或命令提示符）。</p>
</li>
<li>
<p>导航到保存脚本的目录。</p>
</li>
<li>
<p>运行脚本：</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python generate_links.py</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>脚本运行完成后，你将在当前目录下找到一个名为 <code>links.txt</code> 的文件，其中包含了所有生成的链接。</p>
</li>
</ol>
<h3 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h3>
<p>通过这个教程，你已经学会了如何使用 Python 生成链接并将它们保存到文本文件中。这种技术可以应用于各种需要生成链接列表的场景，比如下载图片、处理数据等。希望这个教程对你有所帮助，如果有任何问题或需要进一步的帮助，请随时联系我！</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>基本语法</title>
    <url>/post/54667693.html</url>
    <content><![CDATA[<hr />
<h2 id="基本语法"><a class="markdownIt-Anchor" href="#基本语法"></a> 基本语法</h2>
<table>
<thead>
<tr>
<th>元素</th>
<th>Markdown 语法</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://markdown.com.cn/basic-syntax/headings.html">标题（Heading）</a></td>
<td><code># H1## H2### H3</code></td>
</tr>
<tr>
<td><a href="https://markdown.com.cn/basic-syntax/bold.html">粗体（Bold）</a></td>
<td><code>**bold text**</code></td>
</tr>
<tr>
<td><a href="https://markdown.com.cn/basic-syntax/italic.html">斜体（Italic）</a></td>
<td><code>*italicized text*</code></td>
</tr>
<tr>
<td><a href="https://markdown.com.cn/basic-syntax/blockquotes.html">引用块（Blockquote）</a></td>
<td><code>&gt; blockquote</code></td>
</tr>
<tr>
<td><a href="https://markdown.com.cn/basic-syntax/ordered-lists.html">有序列表（Ordered List）</a></td>
<td><code>1. First item</code> <code>2. Second item</code> <code>3. Third item</code></td>
</tr>
<tr>
<td><a href="https://markdown.com.cn/basic-syntax/unordered-lists.html">无序列表（Unordered List）</a></td>
<td><code>- First item- Second item- Third item</code></td>
</tr>
<tr>
<td><a href="https://markdown.com.cn/basic-syntax/code.html">代码（Code）</a></td>
<td><code>code</code></td>
</tr>
<tr>
<td><a href="https://markdown.com.cn/basic-syntax/horizontal-rules.html">分隔线（Horizontal Rule）</a></td>
<td><code>---</code></td>
</tr>
<tr>
<td><a href="https://markdown.com.cn/basic-syntax/links.html">链接（Link）</a></td>
<td><code>[title](https://www.example.com)</code></td>
</tr>
<tr>
<td><a href="https://markdown.com.cn/basic-syntax/images.html">图片（Image）</a></td>
<td><code>![alt text](image.jpg)</code></td>
</tr>
</tbody>
</table>
<h2 id="扩展语法"><a class="markdownIt-Anchor" href="#扩展语法"></a> <a href="https://markdown.com.cn/cheat-sheet.html">扩展语法</a></h2>
<table>
<thead>
<tr>
<th>元素</th>
<th>Markdown 语法</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://markdown.com.cn/extended-syntax/tables.html">表格（Table）</a></td>
<td>`</td>
</tr>
<tr>
<td><a href="https://markdown.com.cn/extended-syntax/fenced-code-blocks.html">代码块（Fenced Code Block）</a></td>
<td><code>&#123; &quot;firstName&quot;: &quot;John&quot;, &quot;lastName&quot;: &quot;Smith&quot;, &quot;age&quot;: 25&#125;</code></td>
</tr>
<tr>
<td><a href="https://markdown.com.cn/extended-syntax/footnotes.html">脚注（Footnote）</a></td>
<td>Here’s a sentence with a footnote. <code>[^1]</code> <code>[^1]</code>: This is the footnote.</td>
</tr>
<tr>
<td><a href="https://markdown.com.cn/extended-syntax/heading-ids.html">标题编号（Heading ID）</a></td>
<td>`### My Great Heading</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
  </entry>
  <entry>
    <title>安装FFmpeg</title>
    <url>/post/35a96fd4.html</url>
    <content><![CDATA[<h1 id="ffmpeg-安装与使用教程"><a class="markdownIt-Anchor" href="#ffmpeg-安装与使用教程"></a> FFmpeg 安装与使用教程</h1>
<p>FFmpeg 是一个强大的多媒体处理工具，可以用于音视频的录制、转换和流播。它支持几乎所有流行的音视频格式和编解码器。本文将介绍如何在不同操作系统上安装 FFmpeg 以及一些常见的使用示例。</p>
<h2 id="安装-ffmpeg"><a class="markdownIt-Anchor" href="#安装-ffmpeg"></a> 安装 FFmpeg</h2>
<h3 id="windows-安装"><a class="markdownIt-Anchor" href="#windows-安装"></a> Windows 安装</h3>
<ul>
<li>访问 <a href="https://ffmpeg.org/download.html">FFmpeg 官方网站</a>，下载适用于 Windows 的 FFmpeg 压缩包。</li>
</ul>
<p><img src="https://gitee.com/tge8/img/raw/master/typora-picture/202406170932679.png" alt="第一步" /></p>
<p><img src="https://gitee.com/tge8/img/raw/master/typora-picture/202406170934973.png" alt="第二步" /></p>
<p><img src="https://gitee.com/tge8/img/raw/master/typora-picture/202406170935521.png" alt="第三步" /></p>
<ul>
<li>解压下载的压缩包，将其放在一个方便访问的位置（例如：<code>D:\ffmpeg-7.0.1</code>）。</li>
</ul>
<p><img src="https://gitee.com/tge8/img/raw/master/typora-picture/202406170937210.png" alt="解压记录位置" /></p>
<ul>
<li>将 FFmpeg 的 <code>bin</code> 目录添加到系统的环境变量中：</li>
</ul>
<p>​	右键点击“此电脑”，选择“属性”。</p>
<p><img src="https://gitee.com/tge8/img/raw/master/typora-picture/202406170938574.png" alt="属性" /></p>
<ul>
<li>点击“高级系统设置”，然后点击“环境变量”。</li>
</ul>
<p><img src="https://gitee.com/tge8/img/raw/master/typora-picture/202406170940171.png" alt="高级系统设置" /></p>
<p><img src="https://gitee.com/tge8/img/raw/master/typora-picture/202406170941544.png" alt="环境变量" /></p>
<ul>
<li>在“系统变量”部分，找到并选中“Path”，然后点击“编辑”。</li>
</ul>
<p><img src="https://gitee.com/tge8/img/raw/master/typora-picture/202406170942825.png" alt="系统变量" /></p>
<ul>
<li>点击“新建”，输入 FFmpeg 的 <code>bin</code> 目录路径，例如 <code>D:\ffmpeg-7.0.1\bin</code>，然后点击“确定”。</li>
</ul>
<p><img src="https://gitee.com/tge8/img/raw/master/typora-picture/202406170944301.png" alt="环境变量" /></p>
<ul>
<li><strong>流程图：Windows 安装 FFmpeg</strong></li>
</ul>
<pre class="mermaid"> graph LR
A[下载 FFmpeg] --> B[解压文件]
B --> C[将 FFmpeg 放到 D:\ffmpeg-7.0.1]
C --> D[添加 FFmpeg 到环境变量]</pre>
<h3 id="macos-安装macos安装图略"><a class="markdownIt-Anchor" href="#macos-安装macos安装图略"></a> macOS 安装（macOS安装图略）</h3>
<ul>
<li>在 macOS 上，你可以使用 Homebrew 来安装 FFmpeg：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install ffmpeg</span><br></pre></td></tr></table></figure>
<ul>
<li>如果你还没有安装 Homebrew，可以先在终端中执行以下命令来安装 Homebrew：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)</span>&quot;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>流程图：macOS 安装 FFmpeg</strong></li>
</ul>
<pre class="mermaid">graph LR
A[安装 Homebrew] --> B[运行 brew install ffmpeg]</pre>
<h3 id="linux-安装安装图略"><a class="markdownIt-Anchor" href="#linux-安装安装图略"></a> Linux 安装（安装图略）</h3>
<ul>
<li>在大多数 Linux 发行版上，你可以使用包管理器来安装 FFmpeg。</li>
</ul>
<p>​	对于 Debian/Ubuntu 系列：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install ffmpeg</span><br></pre></td></tr></table></figure>
<p>​	对于 CentOS/RHEL 系列：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo yum install epel-release</span><br><span class="line">sudo yum install ffmpeg</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>流程图：Linux 安装 FFmpeg</strong></li>
</ul>
<pre class="mermaid">graph LR
A[运行 sudo apt/yum install ffmpeg] --> B[安装完成]</pre>
<h2 id="验证安装"><a class="markdownIt-Anchor" href="#验证安装"></a> 验证安装</h2>
<ul>
<li>安装完成后，你可以通过在终端或命令提示符中输入以下命令来验证 FFmpeg 是否安装成功：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -version</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>如果成功安装，你会看到 FFmpeg 的版本信息和编译配置。</p>
</li>
<li>
<p><strong>流程图：验证安装</strong></p>
</li>
</ul>
<pre class="mermaid">graph LR
A[运行 ffmpeg -version] --> B[显示版本信息]</pre>
<h2 id="使用-ffmpeg"><a class="markdownIt-Anchor" href="#使用-ffmpeg"></a> 使用 FFmpeg</h2>
<ul>
<li>FFmpeg 的命令行工具非常强大，下面是一些常见的使用示例。</li>
</ul>
<h3 id="转换视频格式"><a class="markdownIt-Anchor" href="#转换视频格式"></a> 转换视频格式</h3>
<ul>
<li>将一个 MP4 文件转换为 AVI 格式：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 output.avi</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>流程图：转换视频格式</strong></li>
</ul>
<pre class="mermaid">graph LR
A[输入 MP4 文件] --> B[运行转换命令]
B --> C[输出 AVI 文件]</pre>
<h3 id="提取音频"><a class="markdownIt-Anchor" href="#提取音频"></a> 提取音频</h3>
<ul>
<li>从视频文件中提取音频，并保存为 MP3 格式：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -q:a 0 -map a output.mp3</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>流程图：提取音频</strong></li>
</ul>
<pre class="mermaid">graph LR
A[输入视频文件] --> B[运行提取命令]
B --> C[输出音频文件]</pre>
<h3 id="合并视频文件"><a class="markdownIt-Anchor" href="#合并视频文件"></a> 合并视频文件</h3>
<ul>
<li>
<p>将多个视频文件合并为一个文件：</p>
<p>首先，创建一个文本文件 <code>filelist.txt</code>，内容如下：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file &#x27;input1.mp4&#x27;</span><br><span class="line">file &#x27;input2.mp4&#x27;</span><br><span class="line">file &#x27;input3.mp4&#x27;</span><br></pre></td></tr></table></figure>
<p>​	然后使用以下命令合并视频文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -f concat -safe 0 -i filelist.txt -c copy output.mp4</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>流程图：合并视频文件</strong></li>
</ul>
<pre class="mermaid">graph LR
A[创建文件列表] --> B[运行合并命令]
B --> C[输出合并文件]</pre>
<h3 id="调整视频分辨率"><a class="markdownIt-Anchor" href="#调整视频分辨率"></a> 调整视频分辨率</h3>
<ul>
<li>将视频文件调整为 1280x720 分辨率：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vf scale=1280:720 output.mp4</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>流程图：调整视频分辨率</strong></li>
</ul>
<pre class="mermaid">graph LR
A[输入视频文件] --> B[运行调整命令]
B --> C[输出调整文件]</pre>
<h3 id="剪辑视频"><a class="markdownIt-Anchor" href="#剪辑视频"></a> 剪辑视频</h3>
<ul>
<li>剪辑视频从 00:01:00 开始，持续 30 秒：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -ss 00:01:00 -t 30 -c copy output.mp4</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>流程图：剪辑视频</strong></li>
</ul>
<pre class="mermaid">graph LR
A[输入视频文件] --> B[设置起始时间和持续时间]
B --> C[输出剪辑文件]</pre>
<h3 id="添加水印"><a class="markdownIt-Anchor" href="#添加水印"></a> 添加水印</h3>
<ul>
<li>在视频上添加一个图片水印（位置在右上角）：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -i watermark.png -filter_complex <span class="string">&quot;overlay=W-w-10:10&quot;</span> output.mp4</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>流程图：添加水印</strong></li>
</ul>
<pre class="mermaid">graph LR
A[输入视频文件和水印图片] --> B[运行添加水印命令]
B --> C[输出带水印文件]</pre>
<h3 id="压缩视频"><a class="markdownIt-Anchor" href="#压缩视频"></a> 压缩视频</h3>
<ul>
<li>使用 H.264 编码压缩视频：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vcodec libx264 -crf 28 output.mp4</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>流程图：压缩视频</strong></li>
</ul>
<pre class="mermaid">graph LR
A[输入视频文件] --> B[运行压缩命令]
B --> C[输出压缩文件]</pre>
<h3 id="创建-gif"><a class="markdownIt-Anchor" href="#创建-gif"></a> 创建 GIF</h3>
<ul>
<li>从视频中创建 GIF 动画：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vf <span class="string">&quot;fps=10,scale=320:-1:flags=lanczos&quot;</span> output.gif</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>流程图：创建 GIF</strong></li>
</ul>
<pre class="mermaid">graph LR
A[输入视频文件] --> B[运行创建 GIF 命令]
B --> C[输出 GIF 文件]</pre>
<h3 id="分离音视频"><a class="markdownIt-Anchor" href="#分离音视频"></a> 分离音视频</h3>
<ul>
<li>将视频和音频分离为两个文件：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -an -vcodec copy video.mp4</span><br><span class="line">ffmpeg -i input.mp4 -vn -acodec copy audio.mp3</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>流程图：分离音视频</strong></li>
</ul>
<pre class="mermaid">graph LR
A[输入视频文件] --> B[分离视频命令]
B --> C[输出视频文件]
A --> D[分离音频命令]
D --> E[输出音频文件]</pre>
<h2 id="高级功能"><a class="markdownIt-Anchor" href="#高级功能"></a> 高级功能</h2>
<h3 id="添加字幕"><a class="markdownIt-Anchor" href="#添加字幕"></a> 添加字幕</h3>
<ul>
<li>将 SRT 字幕文件添加到视频中：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -vf subtitles=subtitles.srt output.mp4</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>流程图：添加字幕</strong></li>
</ul>
<pre class="mermaid">graph LR
A[输入视频文件和字幕文件] --> B[运行添加字幕命令]
B --> C[输出带字幕文件]</pre>
<h3 id="制作缩略图"><a class="markdownIt-Anchor" href="#制作缩略图"></a> 制作缩略图</h3>
<ul>
<li>从视频中提取缩略图（在第 10 秒）：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -ss 00:00:10 -vframes 1 thumbnail.png</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>流程图：制作缩略图</strong></li>
</ul>
<pre class="mermaid">graph LR
A[输入视频文件] --> B[运行提取缩略图命令]
B --> C[输出缩略图文件]</pre>
<h3 id="添加音效"><a class="markdownIt-Anchor" href="#添加音效"></a> 添加音效</h3>
<ul>
<li>将音频文件添加到视频中：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ffmpeg -i input.mp4 -i background.mp3 -c:v copy -c:a aac -strict experimental output.mp4</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>流程图：添加音效</strong></li>
</ul>
<pre class="mermaid">graph LR
A[输入视频文件和音频文件] --> B[运行添加音效命令]
B --> C[输出带音效文件]</pre>
<h2 id="ffmpeg-常用参数"><a class="markdownIt-Anchor" href="#ffmpeg-常用参数"></a> FFmpeg 常用参数</h2>
<ul>
<li><code>-i</code>：输入文件。</li>
<li><code>-vf</code>：视频滤镜。</li>
<li><code>-af</code>：音频滤镜。</li>
<li><code>-c:v</code>：视频编码器。</li>
<li><code>-c:a</code>：音频编码器。</li>
<li><code>-b:v</code>：视频比特率。</li>
<li><code>-b:a</code>：音频比特率。</li>
<li><code>-r</code>：帧率。</li>
<li><code>-s</code>：分辨率。</li>
<li><code>-ss</code>：开始时间。</li>
<li><code>-t</code>：持续时间。</li>
</ul>
<h2 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h2>
<ul>
<li>
<p>FFmpeg 是一个功能强大且灵活的多媒体处理工具，掌握它可以让你在</p>
</li>
<li>
<p>音视频处理方面如虎添翼。希望这篇教程能帮助你入门 FFmpeg，并能够在日常工作中熟练使用它。</p>
</li>
<li>
<p>如果你遇到任何问题或有更多的需求，FFmpeg 的<a href="https://ffmpeg.org/documentation.html">官方文档</a>是一个非常好的资源，里面有详尽的参数解释和使用示例。</p>
</li>
</ul>
<hr />
<p><strong>声明</strong>：此教程仅供学习使用，请遵守相关法律法规和网站的使用条款，不要将此脚本用于非法用途或商业获利。如因不当使用引起的任何法律问题，作者不承担任何责任。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>教程</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>用API下载图片</title>
    <url>/post/52c1aa50.html</url>
    <content><![CDATA[<h1 id="用api下载图片并保存"><a class="markdownIt-Anchor" href="#用api下载图片并保存"></a> 用API下载图片并保存</h1>
<p>声明： 本文中的脚本仅用于学习和研究目的。请务必遵守目标网站的爬取协议（robots.txt）和相关法律法规，切勿将此脚本用于任何违法或不当的用途。非法使用可能会导致法律后果。<br />
在这篇博客中，我们将探讨如何使用Python从API下载图片，并将其保存到本地。我们将使用<code>requests</code>库发送HTTP请求，使用<code>uuid</code>库生成唯一的文件名，并在指定的目录中保存图片。这个教程适用于初学者以及希望通过Python自动化任务的开发者。</p>
<h4 id="所需库"><a class="markdownIt-Anchor" href="#所需库"></a> 所需库</h4>
<p>首先，确保安装了<code>requests</code>库。你可以使用以下命令进行安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure>
<h4 id="代码实现"><a class="markdownIt-Anchor" href="#代码实现"></a> 代码实现</h4>
<p>下面是实现上述功能的完整代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> uuid  <span class="comment"># 用于生成唯一标识符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_image_from_api</span>(<span class="params">api_url, save_directory</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 发送GET请求获取图片数据</span></span><br><span class="line">        response = requests.get(api_url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="comment"># 生成唯一文件名</span></span><br><span class="line">            file_extension = os.path.splitext(api_url)[<span class="number">1</span>]  <span class="comment"># 获取文件扩展名</span></span><br><span class="line">            unique_filename = <span class="built_in">str</span>(uuid.uuid4()) + file_extension  <span class="comment"># 使用UUID作为文件名</span></span><br><span class="line">            save_path = os.path.join(save_directory, unique_filename)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 写入文件</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(save_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(response.content)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;图片已保存到 <span class="subst">&#123;save_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;请求失败: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;下载失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    api_url = <span class="string">&#x27;https://www.xx.com/xx/&#x27;</span>  <span class="comment"># 替换成实际的API URL</span></span><br><span class="line">    save_directory = <span class="string">&#x27;./xx/&#x27;</span>  <span class="comment"># 图片保存目录，需要存在这个目录</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建保存目录</span></span><br><span class="line">    os.makedirs(save_directory, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 下载图片</span></span><br><span class="line">        save_image_from_api(api_url, save_directory)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    num_runs = <span class="number">100</span>  <span class="comment"># 设定执行次数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_runs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;执行第 <span class="subst">&#123;i+<span class="number">1</span>&#125;</span> 次下载:&quot;</span>)</span><br><span class="line">        main()</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)  <span class="comment"># 可以加入延时，避免请求过于频繁</span></span><br></pre></td></tr></table></figure>
<h3 id="代码讲解"><a class="markdownIt-Anchor" href="#代码讲解"></a> 代码讲解</h3>
<h4 id="导入所需库"><a class="markdownIt-Anchor" href="#导入所需库"></a> 导入所需库</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> uuid</span><br></pre></td></tr></table></figure>
<p>我们导入了以下几个库：</p>
<ul>
<li><code>requests</code>: 用于发送HTTP请求。</li>
<li><code>os</code>: 用于处理文件和目录操作。</li>
<li><code>time</code>: 用于添加延时。</li>
<li><code>uuid</code>: 用于生成唯一文件名。</li>
</ul>
<h4 id="定义保存图片的函数"><a class="markdownIt-Anchor" href="#定义保存图片的函数"></a> 定义保存图片的函数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">save_image_from_api</span>(<span class="params">api_url, save_directory</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 发送GET请求获取图片数据</span></span><br><span class="line">        response = requests.get(api_url)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="comment"># 生成唯一文件名</span></span><br><span class="line">            file_extension = os.path.splitext(api_url)[<span class="number">1</span>]  <span class="comment"># 获取文件扩展名</span></span><br><span class="line">            unique_filename = <span class="built_in">str</span>(uuid.uuid4()) + file_extension  <span class="comment"># 使用UUID作为文件名</span></span><br><span class="line">            save_path = os.path.join(save_directory, unique_filename)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 写入文件</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(save_path, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(response.content)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;图片已保存到 <span class="subst">&#123;save_path&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;请求失败: <span class="subst">&#123;response.status_code&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;下载失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>在这个函数中，我们首先发送一个GET请求获取图片数据。如果请求成功，我们会生成一个唯一的文件名，并将图片数据保存到指定目录中。</p>
<h4 id="主函数"><a class="markdownIt-Anchor" href="#主函数"></a> 主函数</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    api_url = <span class="string">&#x27;https://www.xxx.com/xx/&#x27;</span>  <span class="comment"># 替换成实际的API URL</span></span><br><span class="line">    save_directory = <span class="string">&#x27;./xx/&#x27;</span>  <span class="comment"># 图片保存目录，需要存在这个目录</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建保存目录</span></span><br><span class="line">    os.makedirs(save_directory, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 下载图片</span></span><br><span class="line">        save_image_from_api(api_url, save_directory)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>主函数中，我们定义了API的URL和保存图片的目录，并确保保存目录存在。然后，我们调用<code>save_image_from_api</code>函数来下载图片。</p>
<h4 id="执行多次下载"><a class="markdownIt-Anchor" href="#执行多次下载"></a> 执行多次下载</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    num_runs = <span class="number">100</span>  <span class="comment"># 设定执行次数</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_runs):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;执行第 <span class="subst">&#123;i+<span class="number">1</span>&#125;</span> 次下载:&quot;</span>)</span><br><span class="line">        main()</span><br><span class="line">        time.sleep(<span class="number">0.2</span>)  <span class="comment"># 可以加入延时，避免请求过于频繁</span></span><br></pre></td></tr></table></figure>
<p>在<code>__main__</code>块中，我们设置了下载图片的次数，并通过循环多次调用<code>main</code>函数。同时，使用<code>time.sleep(0.2)</code>添加延时，避免请求过于频繁。</p>
<h3 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h3>
<p>通过以上代码，我们实现了从API下载图片并保存到本地的功能。你可以根据实际需求修改API的URL和保存目录，同时可以调整执行次数和延时，以适应不同的使用场景，有些细节需要注意，下载下来的文件可能没有后缀名或者是别的后缀名，这时需要修改后缀名为.png、.jpg、.jpeg或者webp等图片格式。<br />
<video src="/video/API-d.mp4" position= "absolute" width="100%" height="100%" controls="controls"></video></p>
<p>希望这个教程对你有所帮助！如果有任何问题或建议，欢迎在评论区留言讨论。</p>
]]></content>
      <categories>
        <category>教程</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>教程</tag>
        <tag>知识、技术</tag>
      </tags>
  </entry>
  <entry>
    <title>首页的文章隐藏</title>
    <url>/post/715f8e32.html</url>
    <content><![CDATA[<h2 id="安装插件"><a class="markdownIt-Anchor" href="#安装插件"></a> 安装插件</h2>
<h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3>
<p>在安装之前，先卸载官方的插件，否则会引起冲突。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 卸载官方插件</span></span><br><span class="line">$ npm uninstall hexo-generator-index</span><br><span class="line"><span class="comment"># 安装新插件</span></span><br><span class="line">$ npm install hexo-generator-index-custom --save</span><br></pre></td></tr></table></figure>
<h3 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h3>
<p>在 <code>[you_blog]</code> 根目录下修改<code>_config.butterfly.yml</code>中添加以下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line">  <span class="attr">pagination_dir:</span> <span class="string">page</span></span><br></pre></td></tr></table></figure>
<h2 id="修改侧边栏最近发布"><a class="markdownIt-Anchor" href="#修改侧边栏最近发布"></a> 修改侧边栏最近发布</h2>
<p>修改 <code>[you_blog]\Blog\themes\butterfly\layout\includes\widget\card_recent_post.pug</code></p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">if theme.aside.card_recent_post.enable</span><br><span class="line">  .card-widget.card-recent-post</span><br><span class="line">    .item-headline</span><br><span class="line">      i.fas.fa-list-ol</span><br><span class="line">      span= _p(&#x27;aside.card_recent_post&#x27;)</span><br><span class="line">    .aside-list</span><br><span class="line">      - let postLimit = theme.aside.card_recent_post.limit <span class="comment">=== 0 ? site.posts.length : theme.aside.card_recent_post.limit || 5</span></span><br><span class="line">      ……</span><br><span class="line">        - let link = article.link || article.path</span><br><span class="line">        ……</span><br><span class="line"><span class="addition">+          if article.hide !== true</span></span><br><span class="line">            if post_cover &amp;&amp; theme.cover.aside_enable</span><br><span class="line">              a.thumbnail(href=url_for(link), target=&#x27;_blank&#x27;, title=title)</span><br><span class="line">                img(src=url_for(post_cover) onerror=`this.onerror=null;this.src=&#x27;$&#123;url_for(theme.error_img.post_page)&#125;&#x27;` alt=title)</span><br><span class="line">            .content</span><br><span class="line">              a.title(href=url_for(link), target=&#x27;_blank&#x27;, title=title)= title</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<div class="note orange icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>修改 pug 文件一定注意缩进！！！</p>
</div>
<h2 id="修改文章"><a class="markdownIt-Anchor" href="#修改文章"></a> 修改文章</h2>
<p>在 <code>md</code> 文章的头部信息中添加 <code>hide: true</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 首页的文章隐藏</span><br><span class="line">author: 悦惜等风</span><br><span class="line">date: 2023-11-28 21:48:33</span><br><span class="line">hide: true</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2>
<p>插件 GitHub 地址： <a href="https://github.com/im0o/hexo-generator-index-custom">hexo-generator-index-custom</a><br />
Zhheo： <a href="https://blog.zhheo.com/p/451ff5e9.html">Hexo 的 Butterfly 下如何隐藏部分文章不在首页显示</a><br />
本文章根据：<a href="https://ll.sc.cn/posts/935a/">雷雷屋头</a>编写，感谢雷雷屋头</p>
]]></content>
      <categories>
        <category>Butterfly改造</category>
      </categories>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
